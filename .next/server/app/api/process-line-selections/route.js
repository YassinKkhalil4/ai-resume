"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/process-line-selections/route";
exports.ids = ["app/api/process-line-selections/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprocess-line-selections%2Froute&page=%2Fapi%2Fprocess-line-selections%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-line-selections%2Froute.ts&appDir=%2FUsers%2Fyassinkhalil%2FDownloads%2Fai-resume-tailor_v2_full%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyassinkhalil%2FDownloads%2Fai-resume-tailor_v2_full&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprocess-line-selections%2Froute&page=%2Fapi%2Fprocess-line-selections%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-line-selections%2Froute.ts&appDir=%2FUsers%2Fyassinkhalil%2FDownloads%2Fai-resume-tailor_v2_full%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyassinkhalil%2FDownloads%2Fai-resume-tailor_v2_full&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_yassinkhalil_Downloads_ai_resume_tailor_v2_full_app_api_process_line_selections_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/process-line-selections/route.ts */ \"(rsc)/./app/api/process-line-selections/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/process-line-selections/route\",\n        pathname: \"/api/process-line-selections\",\n        filename: \"route\",\n        bundlePath: \"app/api/process-line-selections/route\"\n    },\n    resolvedPagePath: \"/Users/yassinkhalil/Downloads/ai-resume-tailor_v2_full/app/api/process-line-selections/route.ts\",\n    nextConfigOutput,\n    userland: _Users_yassinkhalil_Downloads_ai_resume_tailor_v2_full_app_api_process_line_selections_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/process-line-selections/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwcm9jZXNzLWxpbmUtc2VsZWN0aW9ucyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGcHJvY2Vzcy1saW5lLXNlbGVjdGlvbnMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZwcm9jZXNzLWxpbmUtc2VsZWN0aW9ucyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnlhc3NpbmtoYWxpbCUyRkRvd25sb2FkcyUyRmFpLXJlc3VtZS10YWlsb3JfdjJfZnVsbCUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZ5YXNzaW5raGFsaWwlMkZEb3dubG9hZHMlMkZhaS1yZXN1bWUtdGFpbG9yX3YyX2Z1bGwmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQytDO0FBQzVIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktcmVzdW1lLXRhaWxvci8/ZTc4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMveWFzc2lua2hhbGlsL0Rvd25sb2Fkcy9haS1yZXN1bWUtdGFpbG9yX3YyX2Z1bGwvYXBwL2FwaS9wcm9jZXNzLWxpbmUtc2VsZWN0aW9ucy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcHJvY2Vzcy1saW5lLXNlbGVjdGlvbnMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9wcm9jZXNzLWxpbmUtc2VsZWN0aW9uc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcHJvY2Vzcy1saW5lLXNlbGVjdGlvbnMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMveWFzc2lua2hhbGlsL0Rvd25sb2Fkcy9haS1yZXN1bWUtdGFpbG9yX3YyX2Z1bGwvYXBwL2FwaS9wcm9jZXNzLWxpbmUtc2VsZWN0aW9ucy9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvcHJvY2Vzcy1saW5lLXNlbGVjdGlvbnMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprocess-line-selections%2Froute&page=%2Fapi%2Fprocess-line-selections%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-line-selections%2Froute.ts&appDir=%2FUsers%2Fyassinkhalil%2FDownloads%2Fai-resume-tailor_v2_full%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyassinkhalil%2FDownloads%2Fai-resume-tailor_v2_full&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/process-line-selections/route.ts":
/*!**************************************************!*\
  !*** ./app/api/process-line-selections/route.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic),\n/* harmony export */   maxDuration: () => (/* binding */ maxDuration),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_line_marking_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/line-marking-parser */ \"(rsc)/./lib/line-marking-parser.ts\");\n/* harmony import */ var _lib_guards__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/guards */ \"(rsc)/./lib/guards.ts\");\n/* harmony import */ var _lib_sessions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/sessions */ \"(rsc)/./lib/sessions.ts\");\n/* harmony import */ var _lib_ai_response_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lib/ai-response-parser */ \"(rsc)/./lib/ai-response-parser.ts\");\n/* harmony import */ var _lib_ats__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../lib/ats */ \"(rsc)/./lib/ats.ts\");\n\n\n\n\n\n\nconst runtime = \"nodejs\";\nconst dynamic = \"force-dynamic\";\nconst maxDuration = 30;\nasync function POST(req) {\n    console.log(\"Process Line Selections API called:\", {\n        method: req.method,\n        url: req.url,\n        timestamp: new Date().toISOString()\n    });\n    try {\n        const guard = (0,_lib_guards__WEBPACK_IMPORTED_MODULE_2__.enforceGuards)(req);\n        if (!guard.ok) return guard.res;\n        const body = await req.json();\n        const { resumeText, selectedLines, sessionId, jdText, tone = \"professional\" } = body;\n        if (!resumeText || !selectedLines || !Array.isArray(selectedLines)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                code: \"invalid_input\",\n                message: \"Missing or invalid resumeText or selectedLines\"\n            }, {\n                status: 400\n            });\n        }\n        if (!jdText) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                code: \"missing_jd\",\n                message: \"Job description text is required for tailoring\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"Processing line selections:\", {\n            resumeTextLength: resumeText.length,\n            selectedLinesCount: selectedLines.length,\n            hasSessionId: !!sessionId,\n            jdTextLength: jdText.length,\n            tone\n        });\n        // Process the line selections into structured experience\n        const processedExperiences = (0,_lib_line_marking_parser__WEBPACK_IMPORTED_MODULE_1__.processLineSelections)(resumeText, selectedLines);\n        if (processedExperiences.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                code: \"no_experience_processed\",\n                message: \"No valid experience could be extracted from the selected lines\"\n            }, {\n                status: 400\n            });\n        }\n        // Validate and clean the processed experiences\n        const validatedExperiences = processedExperiences.map(_lib_line_marking_parser__WEBPACK_IMPORTED_MODULE_1__.validateProcessedExperience);\n        // Create or get the original resume structure\n        let originalResume;\n        let existingSession = null;\n        if (sessionId) {\n            existingSession = (0,_lib_sessions__WEBPACK_IMPORTED_MODULE_3__.getSession)(sessionId);\n        }\n        if (existingSession) {\n            // Use existing resume structure and update experience\n            originalResume = {\n                ...existingSession.original,\n                experience: validatedExperiences\n            };\n        } else {\n            // Create a minimal resume structure with the processed experience\n            originalResume = {\n                summary: \"Professional with relevant experience\",\n                skills: [],\n                experience: validatedExperiences,\n                education: [],\n                certifications: []\n            };\n        }\n        console.log(\"Created resume structure:\", {\n            hasSummary: !!originalResume.summary,\n            skillsCount: originalResume.skills.length,\n            experienceCount: originalResume.experience.length,\n            educationCount: originalResume.education.length,\n            certificationsCount: originalResume.certifications.length\n        });\n        // Run ATS check\n        const keywordStats = (0,_lib_ats__WEBPACK_IMPORTED_MODULE_5__.atsCheck)(originalResume, jdText);\n        console.log(\"ATS check completed:\", {\n            coverage: keywordStats.coverage,\n            matchedKeywords: keywordStats.matched?.length || 0,\n            missingKeywords: keywordStats.missing?.length || 0\n        });\n        // Tailor the resume with AI\n        console.log(\"Starting AI tailoring...\");\n        const { tailored, tokens } = await (0,_lib_ai_response_parser__WEBPACK_IMPORTED_MODULE_4__.getTailoredResume)(originalResume, jdText, tone);\n        console.log(\"AI tailoring completed:\", {\n            hasSummary: !!tailored.summary,\n            skillsCount: tailored.skills_section?.length || 0,\n            experienceCount: tailored.experience?.length || 0,\n            tokensUsed: tokens\n        });\n        // Create or update session\n        let session;\n        if (existingSession) {\n            session = (0,_lib_sessions__WEBPACK_IMPORTED_MODULE_3__.updateSession)(sessionId, {\n                original: originalResume,\n                tailored: tailored,\n                jdText: jdText,\n                keywordStats: keywordStats\n            });\n        } else {\n            session = (0,_lib_sessions__WEBPACK_IMPORTED_MODULE_3__.createSession)(originalResume, tailored, jdText, keywordStats);\n        }\n        if (!session) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                code: \"session_error\",\n                message: \"Failed to create or update session\"\n            }, {\n                status: 500\n            });\n        }\n        // Create processing summary\n        const summary = (0,_lib_line_marking_parser__WEBPACK_IMPORTED_MODULE_1__.createProcessingSummary)(selectedLines, validatedExperiences);\n        console.log(\"Line selection processing completed successfully:\", {\n            sessionId: session.id,\n            summary\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            session_id: session.id,\n            session_version: session.version,\n            original_sections_json: originalResume,\n            preview_sections_json: tailored,\n            keyword_stats: keywordStats,\n            tokens_used: tokens,\n            processing_summary: summary,\n            message: \"Line selections processed and resume tailored successfully\"\n        });\n    } catch (error) {\n        console.error(\"Process line selections error:\", error);\n        console.error(\"Error stack:\", error instanceof Error ? error.stack : \"No stack trace\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            code: \"processing_failed\",\n            message: \"Failed to process line selections\",\n            details:  true ? String(error) : 0,\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/process-line-selections/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/ai-response-parser.ts":
/*!***********************************!*\
  !*** ./lib/ai-response-parser.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractBulletsFromFreeText: () => (/* binding */ extractBulletsFromFreeText),\n/* harmony export */   getTailoredResume: () => (/* binding */ getTailoredResume),\n/* harmony export */   parseAIResponse: () => (/* binding */ parseAIResponse)\n/* harmony export */ });\n/* harmony import */ var _schemas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schemas */ \"(rsc)/./lib/schemas.ts\");\n/* harmony import */ var _telemetry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./telemetry */ \"(rsc)/./lib/telemetry.ts\");\n/* harmony import */ var _jd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jd */ \"(rsc)/./lib/jd.ts\");\n/* harmony import */ var _openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./openai */ \"(rsc)/./lib/openai.ts\");\n/* harmony import */ var _prompts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prompts */ \"(rsc)/./lib/prompts.ts\");\n\n\n\n\n\nasync function parseAIResponse(raw, maxRetries = 3) {\n    let lastError = null;\n    for(let attempt = 1; attempt <= maxRetries; attempt++){\n        try {\n            // Clean the response\n            const cleaned = cleanAIResponse(raw);\n            // Try to parse\n            const parsed = JSON.parse(cleaned);\n            // Validate and coerce into schema\n            const validated = await validateAndCoerceResponse(parsed, attempt);\n            // Log successful parsing\n            (0,_telemetry__WEBPACK_IMPORTED_MODULE_1__.logAIResponse)(attempt, true, undefined, raw.length);\n            return validated;\n        } catch (error) {\n            lastError = error;\n            console.warn(`AI response parsing attempt ${attempt} failed:`, error);\n            // Log failed attempt with detailed error\n            (0,_telemetry__WEBPACK_IMPORTED_MODULE_1__.logAIResponse)(attempt, false, error.message, raw.length);\n            if (attempt < maxRetries) {\n                // Wait before retry\n                await new Promise((resolve)=>setTimeout(resolve, 1000 * attempt));\n            }\n        }\n    }\n    // Log final failure with detailed error information\n    (0,_telemetry__WEBPACK_IMPORTED_MODULE_1__.logAIResponse)(maxRetries, false, lastError?.message, raw.length);\n    throw new Error(`Failed to parse AI response after ${maxRetries} attempts: ${lastError?.message}`);\n}\nasync function validateAndCoerceResponse(parsed, attempt) {\n    try {\n        // First try direct validation\n        return _schemas__WEBPACK_IMPORTED_MODULE_0__.TailoredResultSchema.parse(parsed);\n    } catch (validationError) {\n        console.log(`Direct validation failed (attempt ${attempt}), attempting coercion:`, validationError);\n        // Attempt to coerce the response into the correct schema\n        const coerced = coerceToSchema(parsed);\n        try {\n            // Validate the coerced response\n            return _schemas__WEBPACK_IMPORTED_MODULE_0__.TailoredResultSchema.parse(coerced);\n        } catch (coercionError) {\n            console.error(\"Coercion also failed:\", coercionError);\n            // Log detailed failure information\n            const failureDetails = {\n                originalResponse: parsed,\n                coercedResponse: coerced,\n                validationError: validationError.message,\n                coercionError: coercionError.message,\n                attempt\n            };\n            (0,_telemetry__WEBPACK_IMPORTED_MODULE_1__.logError)(new Error(\"Schema validation and coercion failed\"), failureDetails);\n            throw new Error(`Schema validation failed: ${validationError.message}. Coercion failed: ${coercionError.message}`);\n        }\n    }\n}\nfunction coerceToSchema(parsed) {\n    const coerced = {};\n    // Coerce summary\n    if (parsed.summary && typeof parsed.summary === \"string\") {\n        coerced.summary = parsed.summary.trim() || \"Professional summary not available\";\n    } else if (parsed.summary && typeof parsed.summary === \"object\") {\n        // If summary is an object, try to extract text\n        coerced.summary = extractTextFromObject(parsed.summary) || \"Professional summary not available\";\n    } else {\n        coerced.summary = \"Professional summary not available\";\n    }\n    // Coerce skills_section\n    if (Array.isArray(parsed.skills_section)) {\n        coerced.skills_section = parsed.skills_section.filter((skill)=>typeof skill === \"string\" && skill.trim().length > 0).map((skill)=>skill.trim());\n    } else if (parsed.skills_section && typeof parsed.skills_section === \"string\") {\n        // If skills is a string, split it\n        coerced.skills_section = parsed.skills_section.split(/[,;|•\\n]/).map((s)=>s.trim()).filter((s)=>s.length > 0);\n    } else if (parsed.skills && Array.isArray(parsed.skills)) {\n        // Alternative field name\n        coerced.skills_section = parsed.skills.filter((skill)=>typeof skill === \"string\" && skill.trim().length > 0).map((skill)=>skill.trim());\n    } else {\n        coerced.skills_section = [];\n    }\n    // Coerce experience\n    if (Array.isArray(parsed.experience)) {\n        coerced.experience = parsed.experience.map((exp)=>coerceExperience(exp)).filter(Boolean);\n    } else if (parsed.experience && typeof parsed.experience === \"object\") {\n        // If experience is an object, try to convert to array\n        coerced.experience = [\n            coerceExperience(parsed.experience)\n        ].filter(Boolean);\n    } else {\n        coerced.experience = [];\n    }\n    return coerced;\n}\nfunction coerceExperience(exp) {\n    if (!exp || typeof exp !== \"object\") return null;\n    const coerced = {};\n    // Coerce company\n    if (typeof exp.company === \"string\") {\n        coerced.company = exp.company.trim() || \"Unknown Company\";\n    } else if (exp.company && typeof exp.company === \"object\") {\n        coerced.company = extractTextFromObject(exp.company) || \"Unknown Company\";\n    } else {\n        coerced.company = \"Unknown Company\";\n    }\n    // Coerce role\n    if (typeof exp.role === \"string\") {\n        coerced.role = exp.role.trim() || \"Unknown Role\";\n    } else if (exp.role && typeof exp.role === \"object\") {\n        coerced.role = extractTextFromObject(exp.role) || \"Unknown Role\";\n    } else {\n        coerced.role = \"Unknown Role\";\n    }\n    // Coerce bullets\n    if (Array.isArray(exp.bullets)) {\n        coerced.bullets = exp.bullets.filter((bullet)=>typeof bullet === \"string\" && bullet.trim().length > 0).map((bullet)=>bullet.trim());\n    } else if (exp.bullets && typeof exp.bullets === \"string\") {\n        // If bullets is a string, split it\n        coerced.bullets = exp.bullets.split(/[•\\n]/).map((b)=>b.trim()).filter((b)=>b.length > 0);\n    } else if (exp.description && typeof exp.description === \"string\") {\n        // Alternative field name\n        coerced.bullets = exp.description.split(/[•\\n]/).map((b)=>b.trim()).filter((b)=>b.length > 0);\n    } else {\n        coerced.bullets = [];\n    }\n    return coerced;\n}\nfunction extractTextFromObject(obj) {\n    if (typeof obj === \"string\") return obj;\n    if (typeof obj === \"number\") return obj.toString();\n    if (Array.isArray(obj)) return obj.map(extractTextFromObject).filter(Boolean).join(\" \");\n    if (obj && typeof obj === \"object\") {\n        // Try common text fields\n        const textFields = [\n            \"text\",\n            \"content\",\n            \"value\",\n            \"description\",\n            \"title\"\n        ];\n        for (const field of textFields){\n            if (obj[field] && typeof obj[field] === \"string\") {\n                return obj[field];\n            }\n        }\n        // Fallback to first string value\n        for (const [key, value] of Object.entries(obj)){\n            if (typeof value === \"string\" && value.trim().length > 0) {\n                return value;\n            }\n        }\n    }\n    return null;\n}\nfunction cleanAIResponse(raw) {\n    // Remove any text before the first {\n    const firstBrace = raw.indexOf(\"{\");\n    if (firstBrace > 0) {\n        raw = raw.substring(firstBrace);\n    }\n    // Remove any text after the last }\n    const lastBrace = raw.lastIndexOf(\"}\");\n    if (lastBrace > 0 && lastBrace < raw.length - 1) {\n        raw = raw.substring(0, lastBrace + 1);\n    }\n    // Fix common JSON issues\n    raw = raw.replace(/\\n/g, \" \") // Replace newlines with spaces\n    .replace(/\\s+/g, \" \") // Normalize whitespace\n    .replace(/,(\\s*[}\\]])/g, \"$1\") // Remove trailing commas\n    .replace(/([^\\\\])\\\\([^\"\\\\\\/bfnrt])/g, \"$1\\\\\\\\$2\") // Fix unescaped backslashes\n    .replace(/([^\\\\])\\\\([^\"\\\\\\/bfnrt])/g, \"$1\\\\\\\\$2\") // Fix unescaped backslashes (second pass)\n    .replace(/\"/g, '\"') // Fix smart quotes\n    .replace(/'/g, \"'\") // Fix smart apostrophes\n    ;\n    return raw;\n}\nasync function getTailoredResume(original, jdText, tone) {\n    const maxRetries = 3;\n    let lastError = null;\n    // Enhanced validation - check if we have meaningful data to work with\n    if (!original.experience || original.experience.length === 0) {\n        console.warn(\"No experience data available for tailoring, attempting extraction from free text\");\n        return await handleMissingExperience(original, jdText, tone);\n    }\n    for(let attempt = 1; attempt <= maxRetries; attempt++){\n        try {\n            const messages = [\n                {\n                    role: \"system\",\n                    content: _prompts__WEBPACK_IMPORTED_MODULE_4__.SYSTEM_PROMPT\n                },\n                {\n                    role: \"user\",\n                    content: (0,_prompts__WEBPACK_IMPORTED_MODULE_4__.makeUserPrompt)({\n                        resume_json: original,\n                        job_text: jdText,\n                        tone\n                    })\n                }\n            ];\n            const chat = await (0,_openai__WEBPACK_IMPORTED_MODULE_3__.getOpenAI)().chat.completions.create({\n                model: _openai__WEBPACK_IMPORTED_MODULE_3__.OPENAI_MODEL,\n                messages,\n                temperature: 0.2,\n                response_format: {\n                    type: \"json_object\"\n                },\n                max_tokens: 4000 // Ensure we don't get truncated responses\n            });\n            const raw = chat.choices[0]?.message?.content || \"{}\";\n            if (!raw || raw.trim() === \"\") {\n                throw new Error(\"Empty response from AI\");\n            }\n            // Parse and validate with detailed error reporting\n            const tailored = await parseAIResponse(raw);\n            // Additional validation - ensure we got meaningful content\n            if (!tailored || typeof tailored !== \"object\") {\n                throw new Error(\"AI response is not a valid object\");\n            }\n            // If experience is missing or empty, try to preserve original\n            if (!tailored.experience || tailored.experience.length === 0) {\n                console.warn(\"AI response missing experience, preserving original experience\");\n                tailored.experience = original.experience || [];\n            }\n            // Extract token usage\n            const tokens = chat.usage?.total_tokens || 0;\n            // Log successful AI request\n            (0,_telemetry__WEBPACK_IMPORTED_MODULE_1__.logAIResponse)(attempt, true, undefined, raw.length);\n            return {\n                tailored,\n                tokens\n            };\n        } catch (error) {\n            lastError = error;\n            console.warn(`AI request attempt ${attempt} failed:`, error);\n            console.warn(\"Error details:\", {\n                message: error.message,\n                stack: error.stack,\n                originalExperienceLength: original.experience?.length || 0,\n                jdLength: jdText.length,\n                attempt\n            });\n            // Log failed attempt with detailed context\n            (0,_telemetry__WEBPACK_IMPORTED_MODULE_1__.logAIResponse)(attempt, false, error.message);\n            if (attempt < maxRetries) {\n                // Wait before retry with exponential backoff\n                await new Promise((resolve)=>setTimeout(resolve, 1000 * Math.pow(2, attempt - 1)));\n            }\n        }\n    }\n    // Final fallback: return original resume with minimal changes\n    console.error(\"All AI attempts failed, returning fallback response\");\n    console.error(\"Last error:\", lastError?.message);\n    (0,_telemetry__WEBPACK_IMPORTED_MODULE_1__.logError)(new Error(\"All AI attempts failed\"), {\n        original,\n        jdText,\n        tone,\n        lastError: lastError?.message,\n        attempts: maxRetries\n    });\n    return {\n        tailored: createFallbackResponse(original, jdText),\n        tokens: 0\n    };\n}\nasync function handleMissingExperience(original, jdText, tone) {\n    console.log(\"Handling missing experience - attempting extraction from free text\");\n    try {\n        // First, try to extract experience from free text\n        const extractionPrompt = `Extract work experience from the following resume text. Return a JSON object with an \"experience\" array. Each experience should have \"company\", \"role\", and \"bullets\" fields.\n\nResume text: ${JSON.stringify(original)}\n\nReturn only valid JSON.`;\n        const extractionChat = await (0,_openai__WEBPACK_IMPORTED_MODULE_3__.getOpenAI)().chat.completions.create({\n            model: _openai__WEBPACK_IMPORTED_MODULE_3__.OPENAI_MODEL,\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"You are an expert at extracting structured data from resume text. Return only valid JSON.\"\n                },\n                {\n                    role: \"user\",\n                    content: extractionPrompt\n                }\n            ],\n            temperature: 0.1,\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 2000\n        });\n        const extractionRaw = extractionChat.choices[0]?.message?.content || \"{}\";\n        const extractedData = JSON.parse(extractionRaw);\n        if (extractedData.experience && Array.isArray(extractedData.experience) && extractedData.experience.length > 0) {\n            console.log(\"Successfully extracted experience from free text\");\n            // Now tailor the extracted experience\n            const tailored = await getTailoredResume({\n                ...original,\n                experience: extractedData.experience\n            }, jdText, tone);\n            return tailored;\n        }\n    } catch (error) {\n        console.error(\"Failed to extract experience from free text:\", error);\n    }\n    // If extraction fails, return fallback\n    return {\n        tailored: createFallbackResponse(original, jdText),\n        tokens: 0\n    };\n}\nfunction createFallbackResponse(original, jdText) {\n    // Extract keywords from job description\n    const keywords = (0,_jd__WEBPACK_IMPORTED_MODULE_2__.extractKeywords)(jdText, 10);\n    // Create a minimal tailored response that preserves original data\n    return {\n        summary: original.summary || \"Experienced professional with relevant skills and experience.\",\n        skills_section: original.skills || [],\n        experience: original.experience || []\n    };\n}\n/**\n * Extract structured experience from free-form text using AI\n */ async function extractBulletsFromFreeText(freeText) {\n    if (!freeText || freeText.trim().length === 0) {\n        return [];\n    }\n    const openai = (0,_openai__WEBPACK_IMPORTED_MODULE_3__.getOpenAI)();\n    if (!openai) {\n        console.warn(\"OpenAI not available for bullet extraction\");\n        return [];\n    }\n    const prompt = `Given the following free-form text describing work experience, extract it into a JSON array of roles. Each role should have 'company', 'role', 'dates' (optional, can be empty string), and 'bullets' (an array of strings). If no specific role or company is clear, group related bullets under a generic \"Experience\" role.\n\nExample:\nText: \"Company A (2020-2022) - Software Engineer. Developed X, Implemented Y. Company B (2018-2020) - Junior Dev. Assisted with Z.\"\nOutput:\n[\n  {\n    \"company\": \"Company A\",\n    \"role\": \"Software Engineer\",\n    \"dates\": \"2020-2022\",\n    \"bullets\": [\"Developed X\", \"Implemented Y\"]\n  },\n  {\n    \"company\": \"Company B\",\n    \"role\": \"Junior Dev\",\n    \"dates\": \"2018-2020\",\n    \"bullets\": [\"Assisted with Z\"]\n  }\n]\n\nText: \"${freeText}\"\nOutput:`;\n    try {\n        const chatCompletion = await openai.chat.completions.create({\n            model: _openai__WEBPACK_IMPORTED_MODULE_3__.OPENAI_MODEL,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            temperature: 0.2,\n            response_format: {\n                type: \"json_object\"\n            }\n        });\n        const rawResponse = chatCompletion.choices[0].message.content;\n        if (!rawResponse) {\n            throw new Error(\"AI returned an empty response for bullet extraction\");\n        }\n        const parsed = JSON.parse(rawResponse);\n        // Validate the structure\n        if (Array.isArray(parsed)) {\n            return parsed.map((role)=>({\n                    company: (role.company || \"\").trim() || \"Unknown Company\",\n                    role: (role.role || \"\").trim() || \"Unknown Role\",\n                    dates: (role.dates || \"\").trim() || \"\",\n                    bullets: Array.isArray(role.bullets) ? role.bullets.filter((b)=>typeof b === \"string\" && b.trim().length > 0).map((b)=>b.trim()) : []\n                }));\n        } else if (parsed.experience && Array.isArray(parsed.experience)) {\n            return parsed.experience.map((role)=>({\n                    company: (role.company || \"\").trim() || \"Unknown Company\",\n                    role: (role.role || \"\").trim() || \"Unknown Role\",\n                    dates: (role.dates || \"\").trim() || \"\",\n                    bullets: Array.isArray(role.bullets) ? role.bullets.filter((b)=>typeof b === \"string\" && b.trim().length > 0).map((b)=>b.trim()) : []\n                }));\n        } else {\n            throw new Error(\"Unexpected response format from AI\");\n        }\n    } catch (error) {\n        console.error(\"Error extracting bullets from free text:\", error);\n        (0,_telemetry__WEBPACK_IMPORTED_MODULE_1__.logError)(error, {\n            context: \"bullet_extraction\"\n        });\n        return [];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/ai-response-parser.ts\n");

/***/ }),

/***/ "(rsc)/./lib/ats.ts":
/*!********************!*\
  !*** ./lib/ats.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   atsCheck: () => (/* binding */ atsCheck)\n/* harmony export */ });\n/* harmony import */ var _jd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jd */ \"(rsc)/./lib/jd.ts\");\n\nfunction atsCheck(resume, jdText) {\n    const { all, must, nice } = (0,_jd__WEBPACK_IMPORTED_MODULE_0__.extractKeywords2)(jdText, 20);\n    const resumeText = stringifyResume(resume).toLowerCase();\n    const matched = all.filter((k)=>resumeText.includes(k.toLowerCase()));\n    const missing = all.filter((k)=>!resumeText.includes(k.toLowerCase()));\n    const mustMatched = must.filter((k)=>resumeText.includes(k.toLowerCase()));\n    const mustMissing = must.filter((k)=>!resumeText.includes(k.toLowerCase()));\n    const niceMatched = nice.filter((k)=>resumeText.includes(k.toLowerCase()));\n    const niceMissing = nice.filter((k)=>!resumeText.includes(k.toLowerCase()));\n    const warnings = [];\n    // Enhanced section detection with better validation\n    if (!hasExperienceSection(resume)) {\n        warnings.push(\"No Experience section detected.\");\n    }\n    if (!hasSkillsSection(resume)) {\n        warnings.push(\"No Skills section detected.\");\n    }\n    const base = {\n        coverage: all.length ? matched.length / all.length : 0,\n        matched,\n        missing,\n        warnings,\n        mustCoverage: must.length ? mustMatched.length / must.length : 0,\n        niceCoverage: nice.length ? niceMatched.length / nice.length : 0,\n        mustMatched,\n        mustMissing,\n        niceMatched,\n        niceMissing,\n        topMissing: missing.slice(0, 5)\n    };\n    return base;\n}\nfunction hasExperienceSection(resume) {\n    if (!resume.experience || resume.experience.length === 0) return false;\n    // Check if experience has meaningful content\n    return resume.experience.some((exp)=>exp.company && exp.role && (exp.bullets?.length || 0) > 0);\n}\nfunction hasSkillsSection(resume) {\n    if (!resume.skills || resume.skills.length === 0) return false;\n    // Check if skills have meaningful content\n    return resume.skills.some((skill)=>skill && skill.trim().length > 2);\n}\nfunction stringifyResume(resume) {\n    const parts = [];\n    if (resume.summary) parts.push(resume.summary);\n    if (resume.skills?.length) parts.push(resume.skills.join(\" \"));\n    if (resume.experience?.length) {\n        resume.experience.forEach((exp)=>{\n            if (exp.company) parts.push(exp.company);\n            if (exp.role) parts.push(exp.role);\n            if (exp.bullets?.length) parts.push(exp.bullets.join(\" \"));\n        });\n    }\n    if (resume.education?.length) parts.push(resume.education.join(\" \"));\n    if (resume.certifications?.length) parts.push(resume.certifications.join(\" \"));\n    return parts.join(\" \");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFBSXZDLE9BQU80QixVQUFVLEVBQUVMLFFBQVE7UUFDN0J2QixPQUFPNEIsVUFBVSxDQUFDWSxPQUFPLENBQUNWLENBQUFBO1lBQ3hCLElBQUlBLElBQUlDLE9BQU8sRUFBRU0sTUFBTWxCLElBQUksQ0FBQ1csSUFBSUMsT0FBTztZQUN2QyxJQUFJRCxJQUFJRSxJQUFJLEVBQUVLLE1BQU1sQixJQUFJLENBQUNXLElBQUlFLElBQUk7WUFDakMsSUFBSUYsSUFBSUcsT0FBTyxFQUFFVixRQUFRYyxNQUFNbEIsSUFBSSxDQUFDVyxJQUFJRyxPQUFPLENBQUNNLElBQUksQ0FBQztRQUN2RDtJQUNGO0lBQ0EsSUFBSXZDLE9BQU95QyxTQUFTLEVBQUVsQixRQUFRYyxNQUFNbEIsSUFBSSxDQUFDbkIsT0FBT3lDLFNBQVMsQ0FBQ0YsSUFBSSxDQUFDO0lBQy9ELElBQUl2QyxPQUFPMEMsY0FBYyxFQUFFbkIsUUFBUWMsTUFBTWxCLElBQUksQ0FBQ25CLE9BQU8wQyxjQUFjLENBQUNILElBQUksQ0FBQztJQUV6RSxPQUFPRixNQUFNRSxJQUFJLENBQUM7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1yZXN1bWUtdGFpbG9yLy4vbGliL2F0cy50cz8yN2RkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dHJhY3RLZXl3b3JkczIgfSBmcm9tICcuL2pkJ1xuaW1wb3J0IHsgUmVzdW1lSlNPTiwgS2V5d29yZFN0YXRzIH0gZnJvbSAnLi90eXBlcydcbmltcG9ydCBPcGVuQUkgZnJvbSAnb3BlbmFpJ1xuXG5leHBvcnQgZnVuY3Rpb24gYXRzQ2hlY2socmVzdW1lOiBSZXN1bWVKU09OLCBqZFRleHQ6IHN0cmluZyk6IEtleXdvcmRTdGF0cyB7XG4gIGNvbnN0IHsgYWxsLCBtdXN0LCBuaWNlIH0gPSBleHRyYWN0S2V5d29yZHMyKGpkVGV4dCwgMjApXG4gIGNvbnN0IHJlc3VtZVRleHQgPSBzdHJpbmdpZnlSZXN1bWUocmVzdW1lKS50b0xvd2VyQ2FzZSgpXG5cbiAgY29uc3QgbWF0Y2hlZCA9IGFsbC5maWx0ZXIoayA9PiByZXN1bWVUZXh0LmluY2x1ZGVzKGsudG9Mb3dlckNhc2UoKSkpXG4gIGNvbnN0IG1pc3NpbmcgPSBhbGwuZmlsdGVyKGsgPT4gIXJlc3VtZVRleHQuaW5jbHVkZXMoay50b0xvd2VyQ2FzZSgpKSlcblxuICBjb25zdCBtdXN0TWF0Y2hlZCA9IG11c3QuZmlsdGVyKGsgPT4gcmVzdW1lVGV4dC5pbmNsdWRlcyhrLnRvTG93ZXJDYXNlKCkpKVxuICBjb25zdCBtdXN0TWlzc2luZyA9IG11c3QuZmlsdGVyKGsgPT4gIXJlc3VtZVRleHQuaW5jbHVkZXMoay50b0xvd2VyQ2FzZSgpKSlcbiAgY29uc3QgbmljZU1hdGNoZWQgPSBuaWNlLmZpbHRlcihrID0+IHJlc3VtZVRleHQuaW5jbHVkZXMoay50b0xvd2VyQ2FzZSgpKSlcbiAgY29uc3QgbmljZU1pc3NpbmcgPSBuaWNlLmZpbHRlcihrID0+ICFyZXN1bWVUZXh0LmluY2x1ZGVzKGsudG9Mb3dlckNhc2UoKSkpXG5cbiAgY29uc3Qgd2FybmluZ3M6c3RyaW5nW10gPSBbXVxuICBcbiAgLy8gRW5oYW5jZWQgc2VjdGlvbiBkZXRlY3Rpb24gd2l0aCBiZXR0ZXIgdmFsaWRhdGlvblxuICBpZiAoIWhhc0V4cGVyaWVuY2VTZWN0aW9uKHJlc3VtZSkpIHtcbiAgICB3YXJuaW5ncy5wdXNoKCdObyBFeHBlcmllbmNlIHNlY3Rpb24gZGV0ZWN0ZWQuJylcbiAgfVxuICBpZiAoIWhhc1NraWxsc1NlY3Rpb24ocmVzdW1lKSkge1xuICAgIHdhcm5pbmdzLnB1c2goJ05vIFNraWxscyBzZWN0aW9uIGRldGVjdGVkLicpXG4gIH1cblxuICBjb25zdCBiYXNlOiBLZXl3b3JkU3RhdHMgPSB7XG4gICAgY292ZXJhZ2U6IGFsbC5sZW5ndGggPyBtYXRjaGVkLmxlbmd0aCAvIGFsbC5sZW5ndGggOiAwLFxuICAgIG1hdGNoZWQsIG1pc3NpbmcsIHdhcm5pbmdzLFxuICAgIG11c3RDb3ZlcmFnZTogbXVzdC5sZW5ndGggPyBtdXN0TWF0Y2hlZC5sZW5ndGggLyBtdXN0Lmxlbmd0aCA6IDAsXG4gICAgbmljZUNvdmVyYWdlOiBuaWNlLmxlbmd0aCA/IG5pY2VNYXRjaGVkLmxlbmd0aCAvIG5pY2UubGVuZ3RoIDogMCxcbiAgICBtdXN0TWF0Y2hlZCwgbXVzdE1pc3NpbmcsIG5pY2VNYXRjaGVkLCBuaWNlTWlzc2luZyxcbiAgICB0b3BNaXNzaW5nOiBtaXNzaW5nLnNsaWNlKDAsNSlcbiAgfVxuICByZXR1cm4gYmFzZVxufVxuXG5mdW5jdGlvbiBoYXNFeHBlcmllbmNlU2VjdGlvbihyZXN1bWU6IFJlc3VtZUpTT04pOiBib29sZWFuIHtcbiAgaWYgKCFyZXN1bWUuZXhwZXJpZW5jZSB8fCByZXN1bWUuZXhwZXJpZW5jZS5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZVxuICBcbiAgLy8gQ2hlY2sgaWYgZXhwZXJpZW5jZSBoYXMgbWVhbmluZ2Z1bCBjb250ZW50XG4gIHJldHVybiByZXN1bWUuZXhwZXJpZW5jZS5zb21lKGV4cCA9PiBcbiAgICBleHAuY29tcGFueSAmJiBleHAucm9sZSAmJiBcbiAgICAoZXhwLmJ1bGxldHM/Lmxlbmd0aCB8fCAwKSA+IDBcbiAgKVxufVxuXG5mdW5jdGlvbiBoYXNTa2lsbHNTZWN0aW9uKHJlc3VtZTogUmVzdW1lSlNPTik6IGJvb2xlYW4ge1xuICBpZiAoIXJlc3VtZS5za2lsbHMgfHwgcmVzdW1lLnNraWxscy5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZVxuICBcbiAgLy8gQ2hlY2sgaWYgc2tpbGxzIGhhdmUgbWVhbmluZ2Z1bCBjb250ZW50XG4gIHJldHVybiByZXN1bWUuc2tpbGxzLnNvbWUoc2tpbGwgPT4gXG4gICAgc2tpbGwgJiYgc2tpbGwudHJpbSgpLmxlbmd0aCA+IDJcbiAgKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlSZXN1bWUocmVzdW1lOiBSZXN1bWVKU09OKTogc3RyaW5nIHtcbiAgY29uc3QgcGFydHM6IHN0cmluZ1tdID0gW11cbiAgXG4gIGlmIChyZXN1bWUuc3VtbWFyeSkgcGFydHMucHVzaChyZXN1bWUuc3VtbWFyeSlcbiAgaWYgKHJlc3VtZS5za2lsbHM/Lmxlbmd0aCkgcGFydHMucHVzaChyZXN1bWUuc2tpbGxzLmpvaW4oJyAnKSlcbiAgaWYgKHJlc3VtZS5leHBlcmllbmNlPy5sZW5ndGgpIHtcbiAgICByZXN1bWUuZXhwZXJpZW5jZS5mb3JFYWNoKGV4cCA9PiB7XG4gICAgICBpZiAoZXhwLmNvbXBhbnkpIHBhcnRzLnB1c2goZXhwLmNvbXBhbnkpXG4gICAgICBpZiAoZXhwLnJvbGUpIHBhcnRzLnB1c2goZXhwLnJvbGUpXG4gICAgICBpZiAoZXhwLmJ1bGxldHM/Lmxlbmd0aCkgcGFydHMucHVzaChleHAuYnVsbGV0cy5qb2luKCcgJykpXG4gICAgfSlcbiAgfVxuICBpZiAocmVzdW1lLmVkdWNhdGlvbj8ubGVuZ3RoKSBwYXJ0cy5wdXNoKHJlc3VtZS5lZHVjYXRpb24uam9pbignICcpKVxuICBpZiAocmVzdW1lLmNlcnRpZmljYXRpb25zPy5sZW5ndGgpIHBhcnRzLnB1c2gocmVzdW1lLmNlcnRpZmljYXRpb25zLmpvaW4oJyAnKSlcbiAgXG4gIHJldHVybiBwYXJ0cy5qb2luKCcgJylcbn1cbiJdLCJuYW1lcyI6WyJleHRyYWN0S2V5d29yZHMyIiwiYXRzQ2hlY2siLCJyZXN1bWUiLCJqZFRleHQiLCJhbGwiLCJtdXN0IiwibmljZSIsInJlc3VtZVRleHQiLCJzdHJpbmdpZnlSZXN1bWUiLCJ0b0xvd2VyQ2FzZSIsIm1hdGNoZWQiLCJmaWx0ZXIiLCJrIiwiaW5jbHVkZXMiLCJtaXNzaW5nIiwibXVzdE1hdGNoZWQiLCJtdXN0TWlzc2luZyIsIm5pY2VNYXRjaGVkIiwibmljZU1pc3NpbmciLCJ3YXJuaW5ncyIsImhhc0V4cGVyaWVuY2VTZWN0aW9uIiwicHVzaCIsImhhc1NraWxsc1NlY3Rpb24iLCJiYXNlIiwiY292ZXJhZ2UiLCJsZW5ndGgiLCJtdXN0Q292ZXJhZ2UiLCJuaWNlQ292ZXJhZ2UiLCJ0b3BNaXNzaW5nIiwic2xpY2UiLCJleHBlcmllbmNlIiwic29tZSIsImV4cCIsImNvbXBhbnkiLCJyb2xlIiwiYnVsbGV0cyIsInNraWxscyIsInNraWxsIiwidHJpbSIsInBhcnRzIiwic3VtbWFyeSIsImpvaW4iLCJmb3JFYWNoIiwiZWR1Y2F0aW9uIiwiY2VydGlmaWNhdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/ats.ts\n");

/***/ }),

/***/ "(rsc)/./lib/config.ts":
/*!***********************!*\
  !*** ./lib/config.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getConfig: () => (/* binding */ getConfig),\n/* harmony export */   loadConfig: () => (/* binding */ loadConfig),\n/* harmony export */   saveConfig: () => (/* binding */ saveConfig),\n/* harmony export */   updateConfig: () => (/* binding */ updateConfig)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n\nconst CONFIG_PATH = \"/tmp/ai-resume-tailor-config.json\";\nlet config = {\n    rate: {\n        ipPerMin: Number(process.env.RATE_IP_PER_MIN || 30),\n        sessionPerMin: Number(process.env.RATE_SESSION_PER_MIN || 5)\n    },\n    invites: (process.env.INVITE_CODES || \"\").split(\",\").map((s)=>s.trim()).filter(Boolean),\n    openaiKey: undefined,\n    pauseTailor: false,\n    pauseExport: false\n};\nfunction loadConfig() {\n    try {\n        if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(CONFIG_PATH)) {\n            const raw = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(CONFIG_PATH, \"utf8\");\n            const fileCfg = JSON.parse(raw);\n            config = {\n                ...config,\n                ...fileCfg\n            };\n        }\n    } catch  {}\n}\nfunction saveConfig() {\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));\n    } catch  {}\n}\nfunction getConfig() {\n    return config;\n}\nfunction updateConfig(partial) {\n    config = {\n        ...config,\n        ...partial,\n        rate: {\n            ...config.rate,\n            ...partial.rate || {}\n        }\n    };\n    saveConfig();\n}\nloadConfig();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvY29uZmlnLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFtQjtBQUNuQixNQUFNQyxjQUFjO0FBVXBCLElBQUlDLFNBQW9CO0lBQ3RCQyxNQUFNO1FBQUVDLFVBQVVDLE9BQU9DLFFBQVFDLEdBQUcsQ0FBQ0MsZUFBZSxJQUFFO1FBQUtDLGVBQWVKLE9BQU9DLFFBQVFDLEdBQUcsQ0FBQ0csb0JBQW9CLElBQUU7SUFBRztJQUN0SEMsU0FBUyxDQUFDTCxRQUFRQyxHQUFHLENBQUNLLFlBQVksSUFBRSxFQUFDLEVBQUdDLEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUNDLENBQUFBLElBQUdBLEVBQUVDLElBQUksSUFBSUMsTUFBTSxDQUFDQztJQUMzRUMsV0FBV0M7SUFDWEMsYUFBYTtJQUNiQyxhQUFhO0FBQ2Y7QUFFTyxTQUFTQztJQUNkLElBQUk7UUFDRixJQUFJdkIsb0RBQWEsQ0FBQ0MsY0FBYztZQUM5QixNQUFNd0IsTUFBTXpCLHNEQUFlLENBQUNDLGFBQWE7WUFDekMsTUFBTTBCLFVBQVVDLEtBQUtDLEtBQUssQ0FBQ0o7WUFDM0J2QixTQUFTO2dCQUFFLEdBQUdBLE1BQU07Z0JBQUUsR0FBR3lCLE9BQU87WUFBQztRQUNuQztJQUNGLEVBQUUsT0FBTSxDQUFDO0FBQ1g7QUFFTyxTQUFTRztJQUNkLElBQUk7UUFBRTlCLHVEQUFnQixDQUFDQyxhQUFhMkIsS0FBS0ksU0FBUyxDQUFDOUIsUUFBUSxNQUFNO0lBQUksRUFBRSxPQUFNLENBQUM7QUFDaEY7QUFFTyxTQUFTK0I7SUFBeUIsT0FBTy9CO0FBQU87QUFFaEQsU0FBU2dDLGFBQWFDLE9BQTJCO0lBQ3REakMsU0FBUztRQUFFLEdBQUdBLE1BQU07UUFBRSxHQUFHaUMsT0FBTztRQUFFaEMsTUFBTTtZQUFFLEdBQUdELE9BQU9DLElBQUk7WUFBRSxHQUFJZ0MsUUFBUWhDLElBQUksSUFBRSxDQUFDLENBQUM7UUFBRTtJQUFFO0lBQ2xGMkI7QUFDRjtBQUNBUCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXJlc3VtZS10YWlsb3IvLi9saWIvY29uZmlnLnRzPzEyODUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJ1xuY29uc3QgQ09ORklHX1BBVEggPSAnL3RtcC9haS1yZXN1bWUtdGFpbG9yLWNvbmZpZy5qc29uJ1xuXG5leHBvcnQgdHlwZSBBcHBDb25maWcgPSB7XG4gIHJhdGU6IHsgaXBQZXJNaW46IG51bWJlciwgc2Vzc2lvblBlck1pbjogbnVtYmVyIH0sXG4gIGludml0ZXM6IHN0cmluZ1tdLFxuICBvcGVuYWlLZXk/OiBzdHJpbmcsXG4gIHBhdXNlVGFpbG9yPzogYm9vbGVhbixcbiAgcGF1c2VFeHBvcnQ/OiBib29sZWFuXG59XG5cbmxldCBjb25maWc6IEFwcENvbmZpZyA9IHtcbiAgcmF0ZTogeyBpcFBlck1pbjogTnVtYmVyKHByb2Nlc3MuZW52LlJBVEVfSVBfUEVSX01JTnx8MzApLCBzZXNzaW9uUGVyTWluOiBOdW1iZXIocHJvY2Vzcy5lbnYuUkFURV9TRVNTSU9OX1BFUl9NSU58fDUpIH0sXG4gIGludml0ZXM6IChwcm9jZXNzLmVudi5JTlZJVEVfQ09ERVN8fCcnKS5zcGxpdCgnLCcpLm1hcChzPT5zLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pLFxuICBvcGVuYWlLZXk6IHVuZGVmaW5lZCxcbiAgcGF1c2VUYWlsb3I6IGZhbHNlLFxuICBwYXVzZUV4cG9ydDogZmFsc2Vcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRDb25maWcoKSB7XG4gIHRyeSB7XG4gICAgaWYgKGZzLmV4aXN0c1N5bmMoQ09ORklHX1BBVEgpKSB7XG4gICAgICBjb25zdCByYXcgPSBmcy5yZWFkRmlsZVN5bmMoQ09ORklHX1BBVEgsICd1dGY4JylcbiAgICAgIGNvbnN0IGZpbGVDZmcgPSBKU09OLnBhcnNlKHJhdylcbiAgICAgIGNvbmZpZyA9IHsgLi4uY29uZmlnLCAuLi5maWxlQ2ZnIH1cbiAgICB9XG4gIH0gY2F0Y2gge31cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVDb25maWcoKSB7XG4gIHRyeSB7IGZzLndyaXRlRmlsZVN5bmMoQ09ORklHX1BBVEgsIEpTT04uc3RyaW5naWZ5KGNvbmZpZywgbnVsbCwgMikpIH0gY2F0Y2gge31cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmZpZygpOiBBcHBDb25maWcgeyByZXR1cm4gY29uZmlnIH1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNvbmZpZyhwYXJ0aWFsOiBQYXJ0aWFsPEFwcENvbmZpZz4pIHtcbiAgY29uZmlnID0geyAuLi5jb25maWcsIC4uLnBhcnRpYWwsIHJhdGU6IHsgLi4uY29uZmlnLnJhdGUsIC4uLihwYXJ0aWFsLnJhdGV8fHt9KSB9IH1cbiAgc2F2ZUNvbmZpZygpXG59XG5sb2FkQ29uZmlnKClcbiJdLCJuYW1lcyI6WyJmcyIsIkNPTkZJR19QQVRIIiwiY29uZmlnIiwicmF0ZSIsImlwUGVyTWluIiwiTnVtYmVyIiwicHJvY2VzcyIsImVudiIsIlJBVEVfSVBfUEVSX01JTiIsInNlc3Npb25QZXJNaW4iLCJSQVRFX1NFU1NJT05fUEVSX01JTiIsImludml0ZXMiLCJJTlZJVEVfQ09ERVMiLCJzcGxpdCIsIm1hcCIsInMiLCJ0cmltIiwiZmlsdGVyIiwiQm9vbGVhbiIsIm9wZW5haUtleSIsInVuZGVmaW5lZCIsInBhdXNlVGFpbG9yIiwicGF1c2VFeHBvcnQiLCJsb2FkQ29uZmlnIiwiZXhpc3RzU3luYyIsInJhdyIsInJlYWRGaWxlU3luYyIsImZpbGVDZmciLCJKU09OIiwicGFyc2UiLCJzYXZlQ29uZmlnIiwid3JpdGVGaWxlU3luYyIsInN0cmluZ2lmeSIsImdldENvbmZpZyIsInVwZGF0ZUNvbmZpZyIsInBhcnRpYWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/config.ts\n");

/***/ }),

/***/ "(rsc)/./lib/guards.ts":
/*!***********************!*\
  !*** ./lib/guards.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clientIP: () => (/* binding */ clientIP),\n/* harmony export */   enforceGuards: () => (/* binding */ enforceGuards),\n/* harmony export */   hasInvite: () => (/* binding */ hasInvite),\n/* harmony export */   sessionID: () => (/* binding */ sessionID)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"(rsc)/./lib/config.ts\");\n\n\nconst ipHits = new Map();\nconst sidHits = new Map();\nfunction now() {\n    return Date.now();\n}\nfunction slide(arr, windowMs) {\n    const t = now();\n    while(arr.length && t - arr[0] > windowMs)arr.shift();\n}\nfunction pushHit(map, key) {\n    const arr = map.get(key) || [];\n    arr.push(now());\n    map.set(key, arr);\n    return arr;\n}\nfunction cookieValue(req, name) {\n    const cookie = req.headers.get(\"cookie\") || \"\";\n    const match = cookie.match(new RegExp(\"(?:^|; )\" + name + \"=([^;]+)\"));\n    return match ? decodeURIComponent(match[1]) : null;\n}\nfunction clientIP(req) {\n    const fwd = req.headers.get(\"x-forwarded-for\") || \"\";\n    const ip = fwd.split(\",\")[0].trim() || \"0.0.0.0\";\n    return ip;\n}\nfunction sessionID(req) {\n    return cookieValue(req, \"sid\") || \"anon\";\n}\nfunction hasInvite(req) {\n    const cfg = (0,_config__WEBPACK_IMPORTED_MODULE_1__.getConfig)();\n    if (!cfg.invites.length) return true;\n    const header = req.headers.get(\"x-invite-code\") || \"\";\n    const cookie = cookieValue(req, \"invite\") || \"\";\n    const code = header || cookie;\n    if (!code) return false;\n    return cfg.invites.includes(code);\n}\nfunction enforceGuards(req) {\n    const cfg = (0,_config__WEBPACK_IMPORTED_MODULE_1__.getConfig)();\n    if (!hasInvite(req)) {\n        return {\n            ok: false,\n            res: next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                code: \"invite_required\",\n                message: \"Invite code required\"\n            }, {\n                status: 403\n            })\n        };\n    }\n    const ip = clientIP(req);\n    const sid = sessionID(req);\n    const ipArr = pushHit(ipHits, ip);\n    const sidArr = pushHit(sidHits, sid);\n    slide(ipArr, 60000);\n    slide(sidArr, 60000);\n    // prune empty and cap map sizes to avoid unbounded growth\n    pruneMaps();\n    if (ipArr.length > cfg.rate.ipPerMin) {\n        return {\n            ok: false,\n            res: next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                code: \"rate_limited\",\n                message: \"Too many requests\"\n            }, {\n                status: 429\n            })\n        };\n    }\n    if (sidArr.length > cfg.rate.sessionPerMin) {\n        return {\n            ok: false,\n            res: next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                code: \"rate_limited\",\n                message: \"Too many requests\"\n            }, {\n                status: 429\n            })\n        };\n    }\n    return {\n        ok: true\n    };\n}\nfunction pruneMaps(windowMs = 60000, maxKeys = 5000) {\n    const nowMs = now();\n    for (const [k, arr] of ipHits){\n        while(arr.length && nowMs - arr[0] > windowMs)arr.shift();\n        if (arr.length === 0) ipHits.delete(k);\n    }\n    for (const [k, arr] of sidHits){\n        while(arr.length && nowMs - arr[0] > windowMs)arr.shift();\n        if (arr.length === 0) sidHits.delete(k);\n    }\n    if (ipHits.size > maxKeys) {\n        for (const k of ipHits.keys()){\n            ipHits.delete(k);\n            if (ipHits.size <= maxKeys) break;\n        }\n    }\n    if (sidHits.size > maxKeys) {\n        for (const k of sidHits.keys()){\n            sidHits.delete(k);\n            if (sidHits.size <= maxKeys) break;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/guards.ts\n");

/***/ }),

/***/ "(rsc)/./lib/jd.ts":
/*!*******************!*\
  !*** ./lib/jd.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractJDFromUrl: () => (/* binding */ extractJDFromUrl),\n/* harmony export */   extractKeywords: () => (/* binding */ extractKeywords),\n/* harmony export */   extractKeywords2: () => (/* binding */ extractKeywords2)\n/* harmony export */ });\nasync function extractJDFromUrl(url) {\n    const u = new URL(url);\n    if (!/^https?:$/.test(u.protocol)) throw new Error(\"Invalid protocol\");\n    const ctrl = new AbortController();\n    const to = setTimeout(()=>ctrl.abort(), 15000);\n    try {\n        const res = await fetch(url, {\n            signal: ctrl.signal,\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 AI-Resume-Tailor\"\n            }\n        });\n        if (!res.ok) throw new Error(`HTTP ${res.status}`);\n        const html = await res.text();\n        const text = html.replace(/<script[\\s\\S]*?<\\/script>/g, \" \").replace(/<style[\\s\\S]*?<\\/style>/g, \" \").replace(/<[^>]+>/g, \" \").replace(/\\s+/g, \" \");\n        return text.slice(0, 5000);\n    } finally{\n        clearTimeout(to);\n    }\n}\nfunction extractKeywords(jdText, topN = 20) {\n    return extractKeywords2(jdText, topN).all;\n}\nfunction extractKeywords2(jdText, topN = 20) {\n    const lower = (jdText || \"\").toLowerCase();\n    const tokens = lower.match(/[a-zA-Z0-9\\+#\\.\\-]{2,}/g) || [];\n    const stop = new Set([\n        \"and\",\n        \"the\",\n        \"for\",\n        \"with\",\n        \"you\",\n        \"our\",\n        \"will\",\n        \"are\",\n        \"is\",\n        \"to\",\n        \"in\",\n        \"of\",\n        \"a\",\n        \"an\",\n        \"on\",\n        \"as\",\n        \"be\",\n        \"by\",\n        \"or\",\n        \"we\",\n        \"your\",\n        \"this\",\n        \"that\",\n        \"at\",\n        \"from\",\n        \"preferred\",\n        \"requirements\",\n        \"responsibilities\",\n        \"experience\"\n    ]);\n    const counts = {};\n    for (const t of tokens){\n        if (stop.has(t)) continue;\n        if (t.length <= 2) continue;\n        counts[t] = (counts[t] || 0) + 1;\n    }\n    let ranked = Object.entries(counts).sort((a, b)=>b[1] - a[1]).map(([k])=>k);\n    const critical = [\n        \"sql\",\n        \"python\",\n        \"excel\",\n        \"tableau\",\n        \"crm\",\n        \"react\",\n        \"node\",\n        \"aws\",\n        \"azure\",\n        \"gcp\",\n        \"adwords\",\n        \"google\",\n        \"facebook\",\n        \"paid\",\n        \"seo\",\n        \"sem\",\n        \"kpi\",\n        \"etl\",\n        \"ml\",\n        \"terraform\",\n        \"salesforce\",\n        \"hubspot\",\n        \"redux\",\n        \"typescript\",\n        \"next\",\n        \"fastapi\",\n        \"django\",\n        \"flask\",\n        \"java\",\n        \"go\",\n        \"kotlin\",\n        \"swift\",\n        \"figma\"\n    ];\n    for (const c of critical)if (lower.includes(c) && !ranked.includes(c)) ranked.unshift(c);\n    ranked = Array.from(new Set(ranked)).slice(0, topN);\n    const must = ranked.filter((k)=>critical.includes(k));\n    const nice = ranked.filter((k)=>!critical.includes(k));\n    return {\n        all: ranked,\n        must,\n        nice\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T2UsTUFBTSxDQUFDUixDQUFBQSxJQUFLLENBQUNDLFNBQVNFLFFBQVEsQ0FBQ0g7SUFDbkQsT0FBTztRQUFFbEIsS0FBS1c7UUFBUWM7UUFBTUU7SUFBSztBQUNuQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXJlc3VtZS10YWlsb3IvLi9saWIvamQudHM/MDliZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgYXN5bmMgZnVuY3Rpb24gZXh0cmFjdEpERnJvbVVybCh1cmw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHUgPSBuZXcgVVJMKHVybClcbiAgaWYgKCEvXmh0dHBzPzokLy50ZXN0KHUucHJvdG9jb2wpKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcHJvdG9jb2wnKVxuXG4gIGNvbnN0IGN0cmwgPSBuZXcgQWJvcnRDb250cm9sbGVyKClcbiAgY29uc3QgdG8gPSBzZXRUaW1lb3V0KCgpID0+IGN0cmwuYWJvcnQoKSwgMTUwMDApXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2godXJsLCB7IHNpZ25hbDogY3RybC5zaWduYWwsIGhlYWRlcnM6IHsgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgQUktUmVzdW1lLVRhaWxvcicgfSB9KVxuICAgIGlmICghcmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgJHtyZXMuc3RhdHVzfWApXG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlcy50ZXh0KClcbiAgICBjb25zdCB0ZXh0ID0gaHRtbFxuICAgICAgLnJlcGxhY2UoLzxzY3JpcHRbXFxzXFxTXSo/PFxcL3NjcmlwdD4vZywnICcpXG4gICAgICAucmVwbGFjZSgvPHN0eWxlW1xcc1xcU10qPzxcXC9zdHlsZT4vZywnICcpXG4gICAgICAucmVwbGFjZSgvPFtePl0rPi9nLCcgJylcbiAgICAgIC5yZXBsYWNlKC9cXHMrL2csJyAnKVxuICAgIHJldHVybiB0ZXh0LnNsaWNlKDAsIDUwMDApXG4gIH0gZmluYWxseSB7XG4gICAgY2xlYXJUaW1lb3V0KHRvKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0S2V5d29yZHMoamRUZXh0OiBzdHJpbmcsIHRvcE49MjApOiBzdHJpbmdbXSB7XG4gIHJldHVybiBleHRyYWN0S2V5d29yZHMyKGpkVGV4dCwgdG9wTikuYWxsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0S2V5d29yZHMyKGpkVGV4dDogc3RyaW5nLCB0b3BOPTIwKTogeyBhbGw6IHN0cmluZ1tdLCBtdXN0OiBzdHJpbmdbXSwgbmljZTogc3RyaW5nW10gfSB7XG4gIGNvbnN0IGxvd2VyID0gKGpkVGV4dHx8JycpLnRvTG93ZXJDYXNlKClcbiAgY29uc3QgdG9rZW5zID0gbG93ZXIubWF0Y2goL1thLXpBLVowLTlcXCsjXFwuXFwtXXsyLH0vZykgfHwgW11cbiAgY29uc3Qgc3RvcCA9IG5ldyBTZXQoWydhbmQnLCd0aGUnLCdmb3InLCd3aXRoJywneW91Jywnb3VyJywnd2lsbCcsJ2FyZScsJ2lzJywndG8nLCdpbicsJ29mJywnYScsJ2FuJywnb24nLCdhcycsJ2JlJywnYnknLCdvcicsJ3dlJywneW91cicsJ3RoaXMnLCd0aGF0JywnYXQnLCdmcm9tJywncHJlZmVycmVkJywncmVxdWlyZW1lbnRzJywncmVzcG9uc2liaWxpdGllcycsJ2V4cGVyaWVuY2UnXSlcbiAgY29uc3QgY291bnRzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge31cbiAgZm9yIChjb25zdCB0IG9mIHRva2Vucykge1xuICAgIGlmIChzdG9wLmhhcyh0KSkgY29udGludWVcbiAgICBpZiAodC5sZW5ndGggPD0gMikgY29udGludWVcbiAgICBjb3VudHNbdF0gPSAoY291bnRzW3RdIHx8IDApICsgMVxuICB9XG4gIGxldCByYW5rZWQgPSBPYmplY3QuZW50cmllcyhjb3VudHMpLnNvcnQoKGEsYik9PmJbMV0tYVsxXSkubWFwKChba10pPT5rKVxuICBjb25zdCBjcml0aWNhbCA9IFsnc3FsJywncHl0aG9uJywnZXhjZWwnLCd0YWJsZWF1JywnY3JtJywncmVhY3QnLCdub2RlJywnYXdzJywnYXp1cmUnLCdnY3AnLCdhZHdvcmRzJywnZ29vZ2xlJywnZmFjZWJvb2snLCdwYWlkJywnc2VvJywnc2VtJywna3BpJywnZXRsJywnbWwnLCd0ZXJyYWZvcm0nLCdzYWxlc2ZvcmNlJywnaHVic3BvdCcsJ3JlZHV4JywndHlwZXNjcmlwdCcsJ25leHQnLCdmYXN0YXBpJywnZGphbmdvJywnZmxhc2snLCdqYXZhJywnZ28nLCdrb3RsaW4nLCdzd2lmdCcsJ2ZpZ21hJ11cbiAgZm9yIChjb25zdCBjIG9mIGNyaXRpY2FsKSBpZiAobG93ZXIuaW5jbHVkZXMoYykgJiYgIXJhbmtlZC5pbmNsdWRlcyhjKSkgcmFua2VkLnVuc2hpZnQoYylcbiAgcmFua2VkID0gQXJyYXkuZnJvbShuZXcgU2V0KHJhbmtlZCkpLnNsaWNlKDAsIHRvcE4pXG4gIGNvbnN0IG11c3QgPSByYW5rZWQuZmlsdGVyKGsgPT4gY3JpdGljYWwuaW5jbHVkZXMoaykpXG4gIGNvbnN0IG5pY2UgPSByYW5rZWQuZmlsdGVyKGsgPT4gIWNyaXRpY2FsLmluY2x1ZGVzKGspKVxuICByZXR1cm4geyBhbGw6IHJhbmtlZCwgbXVzdCwgbmljZSB9XG59XG4iXSwibmFtZXMiOlsiZXh0cmFjdEpERnJvbVVybCIsInVybCIsInUiLCJVUkwiLCJ0ZXN0IiwicHJvdG9jb2wiLCJFcnJvciIsImN0cmwiLCJBYm9ydENvbnRyb2xsZXIiLCJ0byIsInNldFRpbWVvdXQiLCJhYm9ydCIsInJlcyIsImZldGNoIiwic2lnbmFsIiwiaGVhZGVycyIsIm9rIiwic3RhdHVzIiwiaHRtbCIsInRleHQiLCJyZXBsYWNlIiwic2xpY2UiLCJjbGVhclRpbWVvdXQiLCJleHRyYWN0S2V5d29yZHMiLCJqZFRleHQiLCJ0b3BOIiwiZXh0cmFjdEtleXdvcmRzMiIsImFsbCIsImxvd2VyIiwidG9Mb3dlckNhc2UiLCJ0b2tlbnMiLCJtYXRjaCIsInN0b3AiLCJTZXQiLCJjb3VudHMiLCJ0IiwiaGFzIiwibGVuZ3RoIiwicmFua2VkIiwiT2JqZWN0IiwiZW50cmllcyIsInNvcnQiLCJhIiwiYiIsIm1hcCIsImsiLCJjcml0aWNhbCIsImMiLCJpbmNsdWRlcyIsInVuc2hpZnQiLCJBcnJheSIsImZyb20iLCJtdXN0IiwiZmlsdGVyIiwibmljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/jd.ts\n");

/***/ }),

/***/ "(rsc)/./lib/line-marking-parser.ts":
/*!************************************!*\
  !*** ./lib/line-marking-parser.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createProcessingSummary: () => (/* binding */ createProcessingSummary),\n/* harmony export */   processLineSelections: () => (/* binding */ processLineSelections),\n/* harmony export */   validateProcessedExperience: () => (/* binding */ validateProcessedExperience)\n/* harmony export */ });\n/**\n * Process line selections and convert them into structured experience data\n */ function processLineSelections(resumeText, selections) {\n    if (selections.length === 0) {\n        return [];\n    }\n    // Group selections by groupId\n    const groups = {};\n    const ungrouped = [];\n    selections.forEach((selection)=>{\n        if (selection.groupId) {\n            if (!groups[selection.groupId]) {\n                groups[selection.groupId] = [];\n            }\n            groups[selection.groupId].push(selection);\n        } else {\n            ungrouped.push(selection);\n        }\n    });\n    const experiences = [];\n    // Process grouped selections\n    Object.entries(groups).forEach(([groupId, groupSelections])=>{\n        const experience = processGroupedSelections(groupSelections);\n        if (experience) {\n            experiences.push(experience);\n        }\n    });\n    // Process ungrouped selections as a single experience entry\n    if (ungrouped.length > 0) {\n        const experience = processUngroupedSelections(ungrouped);\n        if (experience) {\n            experiences.push(experience);\n        }\n    }\n    return experiences;\n}\n/**\n * Process a group of related line selections into a single experience entry\n */ function processGroupedSelections(selections) {\n    if (selections.length === 0) return null;\n    // Sort by line index to maintain order\n    const sortedSelections = selections.sort((a, b)=>a.lineIndex - b.lineIndex);\n    let company = \"\";\n    let role = \"\";\n    let dates = \"\";\n    const bullets = [];\n    // Process each selection based on its type\n    sortedSelections.forEach((selection)=>{\n        const line = selection.lineText.trim();\n        switch(selection.type){\n            case \"company\":\n                if (!company) company = line;\n                break;\n            case \"role\":\n                if (!role) role = line;\n                break;\n            case \"date\":\n                if (!dates) dates = line;\n                break;\n            case \"bullet\":\n                bullets.push(line);\n                break;\n            default:\n                // Try to infer type from content patterns\n                const inferredType = inferLineType(line);\n                switch(inferredType){\n                    case \"company\":\n                        if (!company) company = line;\n                        break;\n                    case \"role\":\n                        if (!role) role = line;\n                        break;\n                    case \"date\":\n                        if (!dates) dates = line;\n                        break;\n                    case \"bullet\":\n                        bullets.push(line);\n                        break;\n                    default:\n                        // If we can't classify it, treat as a bullet point\n                        bullets.push(line);\n                }\n        }\n    });\n    // Ensure we have at least a company and role\n    if (!company && !role) {\n        // Try to extract from the first line\n        const firstLine = sortedSelections[0]?.lineText.trim() || \"\";\n        if (firstLine) {\n            const parts = firstLine.split(\" - \");\n            if (parts.length >= 2) {\n                company = parts[0].trim();\n                role = parts[1].trim();\n            } else {\n                company = firstLine;\n                role = \"Various Roles\";\n            }\n        }\n    }\n    if (!company) company = \"Unknown Company\";\n    if (!role) role = \"Various Roles\";\n    if (!dates) dates = \"Dates not specified\";\n    return {\n        company,\n        role,\n        dates,\n        bullets: bullets.length > 0 ? bullets : [\n            \"Experience details not specified\"\n        ]\n    };\n}\n/**\n * Process ungrouped selections as a single experience entry\n */ function processUngroupedSelections(selections) {\n    if (selections.length === 0) return null;\n    const sortedSelections = selections.sort((a, b)=>a.lineIndex - b.lineIndex);\n    const lines = sortedSelections.map((s)=>s.lineText.trim()).filter(Boolean);\n    if (lines.length === 0) return null;\n    // Try to extract company and role from the first few lines\n    let company = \"\";\n    let role = \"\";\n    let dates = \"\";\n    const bullets = [];\n    // Look for company/role patterns in the first few lines\n    for(let i = 0; i < Math.min(3, lines.length); i++){\n        const line = lines[i];\n        const inferredType = inferLineType(line);\n        if (inferredType === \"company\" && !company) {\n            company = line;\n        } else if (inferredType === \"role\" && !role) {\n            role = line;\n        } else if (inferredType === \"date\" && !dates) {\n            dates = line;\n        }\n    }\n    // If we still don't have company/role, try to extract from the first line\n    if (!company && !role && lines.length > 0) {\n        const firstLine = lines[0];\n        const parts = firstLine.split(\" - \");\n        if (parts.length >= 2) {\n            company = parts[0].trim();\n            role = parts[1].trim();\n        } else {\n            company = firstLine;\n            role = \"Various Roles\";\n        }\n    }\n    // Add remaining lines as bullets\n    lines.forEach((line, index)=>{\n        if (index >= 3 || !company || !role) {\n            bullets.push(line);\n        }\n    });\n    if (!company) company = \"Various Companies\";\n    if (!role) role = \"Various Roles\";\n    if (!dates) dates = \"Dates not specified\";\n    return {\n        company,\n        role,\n        dates,\n        bullets: bullets.length > 0 ? bullets : [\n            \"Experience details not specified\"\n        ]\n    };\n}\n/**\n * Infer the type of a line based on its content patterns\n */ function inferLineType(line) {\n    const trimmed = line.trim();\n    // Date patterns\n    if (/\\b(19|20)\\d{2}\\b/.test(trimmed) || /\\b(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\b/i.test(trimmed) || /\\b(present|current|ongoing)\\b/i.test(trimmed)) {\n        return \"date\";\n    }\n    // Company patterns (all caps, contains company indicators, or long capitalized text)\n    if (/^[A-Z][A-Z\\s&.,-]+$/.test(trimmed) && (/\\b(inc|llc|corp|ltd|company|co|group|technologies|systems|solutions|services)\\b/i.test(trimmed) || trimmed.length > 10)) {\n        return \"company\";\n    }\n    // Role patterns (title-like, often after company)\n    const roleKeywords = /\\b(engineer|developer|manager|director|analyst|specialist|coordinator|lead|senior|junior|architect|consultant|designer|programmer|administrator|supervisor|executive|officer|representative|assistant|intern|trainee)\\b/i;\n    if (/^[A-Z][a-z\\s&.,-]+$/.test(trimmed) && (roleKeywords.test(trimmed) || trimmed.length > 5 && trimmed.length < 50 && !trimmed.includes(\"•\") && !trimmed.includes(\"-\"))) {\n        return \"role\";\n    }\n    // Bullet patterns\n    const bulletKeywords = /^(developed|implemented|created|designed|managed|led|built|improved|increased|reduced|optimized|delivered|achieved|collaborated|coordinated|supervised|trained|mentored|analyzed|researched|planned|executed|maintained|supported|facilitated|organized|streamlined|enhanced|established|launched|initiated|oversaw|directed|guided|influenced|negotiated|presented|communicated|documented|tested|debugged|troubleshot|configured|deployed|integrated|customized|automated|scaled|monitored|evaluated|assessed|reviewed|audited|validated|verified|ensured|guaranteed|secured|protected|updated|upgraded|modernized|refactored)/i;\n    if (/^[•\\-\\*]\\s+/.test(trimmed) || bulletKeywords.test(trimmed)) {\n        return \"bullet\";\n    }\n    return \"other\";\n}\n/**\n * Validate and clean processed experience data\n */ function validateProcessedExperience(experience) {\n    return {\n        company: (experience.company || \"\").trim() || \"Unknown Company\",\n        role: (experience.role || \"\").trim() || \"Unknown Role\",\n        dates: (experience.dates || \"\").trim() || \"Dates not specified\",\n        bullets: (experience.bullets || []).map((bullet)=>bullet.trim()).filter((bullet)=>bullet.length > 0).slice(0, 12) // Limit to 12 bullets per experience\n    };\n}\n/**\n * Create a summary of the processing results\n */ function createProcessingSummary(originalSelections, processedExperiences) {\n    const groups = new Set(originalSelections.map((s)=>s.groupId).filter(Boolean));\n    return {\n        totalLines: originalSelections.length,\n        totalExperiences: processedExperiences.length,\n        totalBullets: processedExperiences.reduce((total, exp)=>total + exp.bullets.length, 0),\n        groups: groups.size,\n        ungrouped: originalSelections.filter((s)=>!s.groupId).length\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/line-marking-parser.ts\n");

/***/ }),

/***/ "(rsc)/./lib/openai.ts":
/*!***********************!*\
  !*** ./lib/openai.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OPENAI_MODEL: () => (/* binding */ OPENAI_MODEL),\n/* harmony export */   getOpenAI: () => (/* binding */ getOpenAI)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"(rsc)/./lib/config.ts\");\n\n\nlet client = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nfunction getOpenAI() {\n    const cfg = (0,_config__WEBPACK_IMPORTED_MODULE_0__.getConfig)();\n    if (cfg.openaiKey) {\n        client = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n            apiKey: cfg.openaiKey\n        });\n    }\n    return client;\n}\nconst OPENAI_MODEL = process.env.OPENAI_MODEL || \"gpt-4o-mini\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvb3BlbmFpLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMkI7QUFDUztBQUVwQyxJQUFJRSxTQUFTLElBQUlGLDhDQUFNQSxDQUFDO0lBQUVHLFFBQVFDLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYztBQUFDO0FBRXRELFNBQVNDO0lBQ2QsTUFBTUMsTUFBTVAsa0RBQVNBO0lBQ3JCLElBQUlPLElBQUlDLFNBQVMsRUFBRTtRQUNqQlAsU0FBUyxJQUFJRiw4Q0FBTUEsQ0FBQztZQUFFRyxRQUFRSyxJQUFJQyxTQUFTO1FBQUM7SUFDOUM7SUFDQSxPQUFPUDtBQUNUO0FBRU8sTUFBTVEsZUFBZU4sUUFBUUMsR0FBRyxDQUFDSyxZQUFZLElBQUksY0FBYSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXJlc3VtZS10YWlsb3IvLi9saWIvb3BlbmFpLnRzPzAwZDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9wZW5BSSBmcm9tICdvcGVuYWknXG5pbXBvcnQgeyBnZXRDb25maWcgfSBmcm9tICcuL2NvbmZpZydcblxubGV0IGNsaWVudCA9IG5ldyBPcGVuQUkoeyBhcGlLZXk6IHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZIH0pXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVuQUkoKSB7XG4gIGNvbnN0IGNmZyA9IGdldENvbmZpZygpXG4gIGlmIChjZmcub3BlbmFpS2V5KSB7XG4gICAgY2xpZW50ID0gbmV3IE9wZW5BSSh7IGFwaUtleTogY2ZnLm9wZW5haUtleSB9KVxuICB9XG4gIHJldHVybiBjbGllbnRcbn1cblxuZXhwb3J0IGNvbnN0IE9QRU5BSV9NT0RFTCA9IHByb2Nlc3MuZW52Lk9QRU5BSV9NT0RFTCB8fCAnZ3B0LTRvLW1pbmknXG4iXSwibmFtZXMiOlsiT3BlbkFJIiwiZ2V0Q29uZmlnIiwiY2xpZW50IiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIk9QRU5BSV9BUElfS0VZIiwiZ2V0T3BlbkFJIiwiY2ZnIiwib3BlbmFpS2V5IiwiT1BFTkFJX01PREVMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/openai.ts\n");

/***/ }),

/***/ "(rsc)/./lib/prompts.ts":
/*!************************!*\
  !*** ./lib/prompts.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SYSTEM_PROMPT: () => (/* binding */ SYSTEM_PROMPT),\n/* harmony export */   makeUserPrompt: () => (/* binding */ makeUserPrompt)\n/* harmony export */ });\nconst SYSTEM_PROMPT = `You are a resume tailoring assistant. You must never invent employment, responsibilities, or metrics not present in the user's resume.\nYou may rephrase and reorder text, emphasize relevant achievements, insert synonyms and role-specific keywords ONLY IF they are consistent with the original experience.\nTarget: ATS-friendly, concise impact bullets: Action verb + what + tools/skills + measurable outcome or scope.\nBullets must be 1–2 lines each, no first-person, no fluff.\nPolicy: absolutely no fabricated credentials, roles, companies, tools, or metrics.`;\nfunction makeUserPrompt({ resume_json, job_text, tone }) {\n    return `RESUME (STRUCTURED JSON):\n${JSON.stringify(resume_json)}\n\nJOB DESCRIPTION:\n${job_text}\n\nTASKS:\n1) Identify top 10 skills/keywords in the JD.\n2) For each experience bullet in the resume, rewrite it to align with the JD when truthful.\n3) If a bullet is irrelevant to the JD, compress or remove it.\n4) Do NOT introduce new employers, roles, or fabricated metrics. If metric unknown, keep qualitative impact.\n5) Return:\n{\n  \"skills_matched\": [...],\n  \"skills_missing_but_relevant\": [...],\n  \"summary\": \"2-3 lines tailored to JD, no I/Me\",\n  \"experience\": [\n    {\"company\": \"...\",\"role\":\"...\",\"dates\":\"...\",\"bullets\":[ \"...\", \"...\", \"...\" ]},\n    ...\n  ],\n  \"skills_section\": [\"...\"],\n  \"notes_to_user\": [\"Flagged ambiguity...\", \"Consider adding ... if true\"]\n}\n\nTONE: ${tone}\nIf the JOB DESCRIPTION content is very short (< 400 chars), only optimize wording and ordering; do not add any new keywords beyond what appears in the resume or JD.\nReturn JSON exactly in the specified schema; no extra keys.`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvcHJvbXB0cy50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLGdCQUFnQixDQUFDOzs7O2tGQUlvRCxDQUFDO0FBRTVFLFNBQVNDLGVBQWUsRUFBRUMsV0FBVyxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBdUQ7SUFDakgsT0FBTyxDQUFDO0FBQ1YsRUFBRUMsS0FBS0MsU0FBUyxDQUFDSixhQUFhOzs7QUFHOUIsRUFBRUMsU0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUFvQkwsRUFBRUMsS0FBSzs7MkRBRThDLENBQUM7QUFDNUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1yZXN1bWUtdGFpbG9yLy4vbGliL3Byb21wdHMudHM/YzE1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgU1lTVEVNX1BST01QVCA9IGBZb3UgYXJlIGEgcmVzdW1lIHRhaWxvcmluZyBhc3Npc3RhbnQuIFlvdSBtdXN0IG5ldmVyIGludmVudCBlbXBsb3ltZW50LCByZXNwb25zaWJpbGl0aWVzLCBvciBtZXRyaWNzIG5vdCBwcmVzZW50IGluIHRoZSB1c2VyJ3MgcmVzdW1lLlxuWW91IG1heSByZXBocmFzZSBhbmQgcmVvcmRlciB0ZXh0LCBlbXBoYXNpemUgcmVsZXZhbnQgYWNoaWV2ZW1lbnRzLCBpbnNlcnQgc3lub255bXMgYW5kIHJvbGUtc3BlY2lmaWMga2V5d29yZHMgT05MWSBJRiB0aGV5IGFyZSBjb25zaXN0ZW50IHdpdGggdGhlIG9yaWdpbmFsIGV4cGVyaWVuY2UuXG5UYXJnZXQ6IEFUUy1mcmllbmRseSwgY29uY2lzZSBpbXBhY3QgYnVsbGV0czogQWN0aW9uIHZlcmIgKyB3aGF0ICsgdG9vbHMvc2tpbGxzICsgbWVhc3VyYWJsZSBvdXRjb21lIG9yIHNjb3BlLlxuQnVsbGV0cyBtdXN0IGJlIDHigJMyIGxpbmVzIGVhY2gsIG5vIGZpcnN0LXBlcnNvbiwgbm8gZmx1ZmYuXG5Qb2xpY3k6IGFic29sdXRlbHkgbm8gZmFicmljYXRlZCBjcmVkZW50aWFscywgcm9sZXMsIGNvbXBhbmllcywgdG9vbHMsIG9yIG1ldHJpY3MuYFxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVVzZXJQcm9tcHQoeyByZXN1bWVfanNvbiwgam9iX3RleHQsIHRvbmUgfTp7IHJlc3VtZV9qc29uOiBhbnksIGpvYl90ZXh0OiBzdHJpbmcsIHRvbmU6IHN0cmluZyB9KSB7XG4gIHJldHVybiBgUkVTVU1FIChTVFJVQ1RVUkVEIEpTT04pOlxuJHtKU09OLnN0cmluZ2lmeShyZXN1bWVfanNvbil9XG5cbkpPQiBERVNDUklQVElPTjpcbiR7am9iX3RleHR9XG5cblRBU0tTOlxuMSkgSWRlbnRpZnkgdG9wIDEwIHNraWxscy9rZXl3b3JkcyBpbiB0aGUgSkQuXG4yKSBGb3IgZWFjaCBleHBlcmllbmNlIGJ1bGxldCBpbiB0aGUgcmVzdW1lLCByZXdyaXRlIGl0IHRvIGFsaWduIHdpdGggdGhlIEpEIHdoZW4gdHJ1dGhmdWwuXG4zKSBJZiBhIGJ1bGxldCBpcyBpcnJlbGV2YW50IHRvIHRoZSBKRCwgY29tcHJlc3Mgb3IgcmVtb3ZlIGl0LlxuNCkgRG8gTk9UIGludHJvZHVjZSBuZXcgZW1wbG95ZXJzLCByb2xlcywgb3IgZmFicmljYXRlZCBtZXRyaWNzLiBJZiBtZXRyaWMgdW5rbm93biwga2VlcCBxdWFsaXRhdGl2ZSBpbXBhY3QuXG41KSBSZXR1cm46XG57XG4gIFwic2tpbGxzX21hdGNoZWRcIjogWy4uLl0sXG4gIFwic2tpbGxzX21pc3NpbmdfYnV0X3JlbGV2YW50XCI6IFsuLi5dLFxuICBcInN1bW1hcnlcIjogXCIyLTMgbGluZXMgdGFpbG9yZWQgdG8gSkQsIG5vIEkvTWVcIixcbiAgXCJleHBlcmllbmNlXCI6IFtcbiAgICB7XCJjb21wYW55XCI6IFwiLi4uXCIsXCJyb2xlXCI6XCIuLi5cIixcImRhdGVzXCI6XCIuLi5cIixcImJ1bGxldHNcIjpbIFwiLi4uXCIsIFwiLi4uXCIsIFwiLi4uXCIgXX0sXG4gICAgLi4uXG4gIF0sXG4gIFwic2tpbGxzX3NlY3Rpb25cIjogW1wiLi4uXCJdLFxuICBcIm5vdGVzX3RvX3VzZXJcIjogW1wiRmxhZ2dlZCBhbWJpZ3VpdHkuLi5cIiwgXCJDb25zaWRlciBhZGRpbmcgLi4uIGlmIHRydWVcIl1cbn1cblxuVE9ORTogJHt0b25lfVxuSWYgdGhlIEpPQiBERVNDUklQVElPTiBjb250ZW50IGlzIHZlcnkgc2hvcnQgKDwgNDAwIGNoYXJzKSwgb25seSBvcHRpbWl6ZSB3b3JkaW5nIGFuZCBvcmRlcmluZzsgZG8gbm90IGFkZCBhbnkgbmV3IGtleXdvcmRzIGJleW9uZCB3aGF0IGFwcGVhcnMgaW4gdGhlIHJlc3VtZSBvciBKRC5cblJldHVybiBKU09OIGV4YWN0bHkgaW4gdGhlIHNwZWNpZmllZCBzY2hlbWE7IG5vIGV4dHJhIGtleXMuYFxufVxuIl0sIm5hbWVzIjpbIlNZU1RFTV9QUk9NUFQiLCJtYWtlVXNlclByb21wdCIsInJlc3VtZV9qc29uIiwiam9iX3RleHQiLCJ0b25lIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/prompts.ts\n");

/***/ }),

/***/ "(rsc)/./lib/schemas.ts":
/*!************************!*\
  !*** ./lib/schemas.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RoleSchema: () => (/* binding */ RoleSchema),\n/* harmony export */   TailoredResultSchema: () => (/* binding */ TailoredResultSchema),\n/* harmony export */   coerceTailoredResult: () => (/* binding */ coerceTailoredResult),\n/* harmony export */   validateTailoredResult: () => (/* binding */ validateTailoredResult)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n\nconst RoleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    company: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, \"Company name is required\"),\n    role: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, \"Role title is required\"),\n    dates: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional().default(\"\"),\n    bullets: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, \"Bullet point cannot be empty\")).max(12, \"Too many bullet points\")\n}).strict();\nconst TailoredResultSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    skills_matched: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional().default([]),\n    skills_missing_but_relevant: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional().default([]),\n    summary: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, \"Summary is required\").optional().default(\"\"),\n    experience: zod__WEBPACK_IMPORTED_MODULE_0__.array(RoleSchema).min(0, \"Experience array is required\"),\n    skills_section: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, \"Skill cannot be empty\")).min(0, \"Skills array is required\"),\n    notes_to_user: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional().default([])\n}).strict();\n// Enhanced validation with detailed error reporting\nfunction validateTailoredResult(data) {\n    try {\n        const result = TailoredResultSchema.parse(data);\n        return {\n            valid: true,\n            data: result,\n            errors: []\n        };\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_1__.ZodError) {\n            const errors = error.errors.map((err)=>{\n                const path = err.path.join(\".\");\n                return `${path}: ${err.message}`;\n            });\n            return {\n                valid: false,\n                errors\n            };\n        }\n        return {\n            valid: false,\n            errors: [\n                String(error)\n            ]\n        };\n    }\n}\n// Coercion helpers for common data issues\nfunction coerceTailoredResult(data) {\n    const coerced = {};\n    // Coerce summary\n    coerced.summary = typeof data.summary === \"string\" ? data.summary.trim() : \"\";\n    // Coerce skills_section\n    if (Array.isArray(data.skills_section)) {\n        coerced.skills_section = data.skills_section.filter((skill)=>typeof skill === \"string\" && skill.trim().length > 0).map((skill)=>skill.trim());\n    } else if (typeof data.skills_section === \"string\") {\n        coerced.skills_section = data.skills_section.split(/[,;|•\\n]/).map((s)=>s.trim()).filter((s)=>s.length > 0);\n    } else {\n        coerced.skills_section = [];\n    }\n    // Coerce experience\n    if (Array.isArray(data.experience)) {\n        coerced.experience = data.experience.map((exp)=>coerceRole(exp)).filter(Boolean);\n    } else {\n        coerced.experience = [];\n    }\n    // Coerce optional fields\n    coerced.skills_matched = Array.isArray(data.skills_matched) ? data.skills_matched : [];\n    coerced.skills_missing_but_relevant = Array.isArray(data.skills_missing_but_relevant) ? data.skills_missing_but_relevant : [];\n    coerced.notes_to_user = Array.isArray(data.notes_to_user) ? data.notes_to_user : [];\n    return coerced;\n}\nfunction coerceRole(exp) {\n    if (!exp || typeof exp !== \"object\") return null;\n    return {\n        company: typeof exp.company === \"string\" ? exp.company.trim() : \"Unknown Company\",\n        role: typeof exp.role === \"string\" ? exp.role.trim() : \"Unknown Role\",\n        dates: typeof exp.dates === \"string\" ? exp.dates.trim() : \"\",\n        bullets: Array.isArray(exp.bullets) ? exp.bullets.filter((b)=>typeof b === \"string\" && b.trim().length > 0).map((b)=>b.trim()) : []\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/schemas.ts\n");

/***/ }),

/***/ "(rsc)/./lib/sessions.ts":
/*!*************************!*\
  !*** ./lib/sessions.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSession: () => (/* binding */ createSession),\n/* harmony export */   deleteSession: () => (/* binding */ deleteSession),\n/* harmony export */   getSession: () => (/* binding */ getSession),\n/* harmony export */   getSessionVersion: () => (/* binding */ getSessionVersion),\n/* harmony export */   updateSession: () => (/* binding */ updateSession),\n/* harmony export */   validateSessionVersion: () => (/* binding */ validateSessionVersion)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n\nconst store = new Map();\nfunction purgeExpired(ttlMs = 60 * 60 * 1000) {\n    const now = Date.now();\n    for (const [id, s] of store){\n        if (now - s.createdAt > ttlMs) store.delete(id);\n    }\n}\nfunction createSession(original, tailored, jdText, keywordStats) {\n    purgeExpired();\n    const id = (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n    const version = generateSessionVersion(original, tailored);\n    const s = {\n        id,\n        version,\n        createdAt: Date.now(),\n        original,\n        tailored,\n        jdText,\n        keywordStats\n    };\n    store.set(id, s);\n    return s;\n}\nfunction getSession(id) {\n    purgeExpired();\n    const s = store.get(id);\n    if (!s) return null;\n    if (Date.now() - s.createdAt > 60 * 60 * 1000) {\n        store.delete(id);\n        return null;\n    }\n    return s;\n}\nfunction updateSession(id, updates) {\n    const s = store.get(id);\n    if (!s) return null;\n    const updated = {\n        ...s,\n        ...updates\n    };\n    if (updates.original || updates.tailored) {\n        updated.version = generateSessionVersion(updated.original, updated.tailored);\n    }\n    store.set(id, updated);\n    return updated;\n}\nfunction deleteSession(id) {\n    return store.delete(id);\n}\nfunction getSessionVersion(id) {\n    const s = getSession(id);\n    return s ? s.version : null;\n}\nfunction generateSessionVersion(original, tailored) {\n    // Create a hash of the content to detect changes\n    const content = JSON.stringify({\n        original,\n        tailored\n    });\n    return btoa(content).slice(0, 16) // Simple hash, first 16 chars\n    ;\n}\nfunction validateSessionVersion(id, providedVersion) {\n    const currentVersion = getSessionVersion(id);\n    return currentVersion === providedVersion;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc2Vzc2lvbnMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFpQztBQWFqQyxNQUFNRSxRQUFRLElBQUlDO0FBRWxCLFNBQVNDLGFBQWFDLFFBQVEsS0FBSyxLQUFLLElBQUk7SUFDMUMsTUFBTUMsTUFBTUMsS0FBS0QsR0FBRztJQUNwQixLQUFLLE1BQU0sQ0FBQ0UsSUFBSUMsRUFBRSxJQUFJUCxNQUFPO1FBQzNCLElBQUlJLE1BQU1HLEVBQUVDLFNBQVMsR0FBR0wsT0FBT0gsTUFBTVMsTUFBTSxDQUFDSDtJQUM5QztBQUNGO0FBRU8sU0FBU0ksY0FBY0MsUUFBb0IsRUFBRUMsUUFBd0IsRUFBRUMsTUFBYyxFQUFFQyxZQUEwQjtJQUN0SFo7SUFDQSxNQUFNSSxLQUFLUCxnREFBSUE7SUFDZixNQUFNZ0IsVUFBVUMsdUJBQXVCTCxVQUFVQztJQUNqRCxNQUFNTCxJQUFhO1FBQUVEO1FBQUlTO1FBQVNQLFdBQVdILEtBQUtELEdBQUc7UUFBSU87UUFBVUM7UUFBVUM7UUFBUUM7SUFBYTtJQUNsR2QsTUFBTWlCLEdBQUcsQ0FBQ1gsSUFBSUM7SUFDZCxPQUFPQTtBQUNUO0FBRU8sU0FBU1csV0FBV1osRUFBVTtJQUNuQ0o7SUFDQSxNQUFNSyxJQUFJUCxNQUFNbUIsR0FBRyxDQUFDYjtJQUNwQixJQUFJLENBQUNDLEdBQUcsT0FBTztJQUNmLElBQUlGLEtBQUtELEdBQUcsS0FBS0csRUFBRUMsU0FBUyxHQUFHLEtBQUssS0FBSyxNQUFNO1FBQzdDUixNQUFNUyxNQUFNLENBQUNIO1FBQ2IsT0FBTztJQUNUO0lBQ0EsT0FBT0M7QUFDVDtBQUVPLFNBQVNhLGNBQWNkLEVBQVUsRUFBRWUsT0FBeUI7SUFDakUsTUFBTWQsSUFBSVAsTUFBTW1CLEdBQUcsQ0FBQ2I7SUFDcEIsSUFBSSxDQUFDQyxHQUFHLE9BQU87SUFFZixNQUFNZSxVQUFVO1FBQUUsR0FBR2YsQ0FBQztRQUFFLEdBQUdjLE9BQU87SUFBQztJQUNuQyxJQUFJQSxRQUFRVixRQUFRLElBQUlVLFFBQVFULFFBQVEsRUFBRTtRQUN4Q1UsUUFBUVAsT0FBTyxHQUFHQyx1QkFBdUJNLFFBQVFYLFFBQVEsRUFBRVcsUUFBUVYsUUFBUTtJQUM3RTtJQUVBWixNQUFNaUIsR0FBRyxDQUFDWCxJQUFJZ0I7SUFDZCxPQUFPQTtBQUNUO0FBRU8sU0FBU0MsY0FBY2pCLEVBQVU7SUFDdEMsT0FBT04sTUFBTVMsTUFBTSxDQUFDSDtBQUN0QjtBQUVPLFNBQVNrQixrQkFBa0JsQixFQUFVO0lBQzFDLE1BQU1DLElBQUlXLFdBQVdaO0lBQ3JCLE9BQU9DLElBQUlBLEVBQUVRLE9BQU8sR0FBRztBQUN6QjtBQUVBLFNBQVNDLHVCQUF1QkwsUUFBb0IsRUFBRUMsUUFBd0I7SUFDNUUsaURBQWlEO0lBQ2pELE1BQU1hLFVBQVVDLEtBQUtDLFNBQVMsQ0FBQztRQUFFaEI7UUFBVUM7SUFBUztJQUNwRCxPQUFPZ0IsS0FBS0gsU0FBU0ksS0FBSyxDQUFDLEdBQUcsSUFBSSw4QkFBOEI7O0FBQ2xFO0FBRU8sU0FBU0MsdUJBQXVCeEIsRUFBVSxFQUFFeUIsZUFBdUI7SUFDeEUsTUFBTUMsaUJBQWlCUixrQkFBa0JsQjtJQUN6QyxPQUFPMEIsbUJBQW1CRDtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXJlc3VtZS10YWlsb3IvLi9saWIvc2Vzc2lvbnMudHM/MWY5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2NCBhcyB1dWlkIH0gZnJvbSAndXVpZCdcbmltcG9ydCB7IFJlc3VtZUpTT04sIFRhaWxvcmVkUmVzdWx0LCBLZXl3b3JkU3RhdHMgfSBmcm9tICcuL3R5cGVzJ1xuXG50eXBlIFNlc3Npb24gPSB7XG4gIGlkOiBzdHJpbmdcbiAgdmVyc2lvbjogc3RyaW5nXG4gIGNyZWF0ZWRBdDogbnVtYmVyXG4gIG9yaWdpbmFsOiBSZXN1bWVKU09OXG4gIHRhaWxvcmVkOiBUYWlsb3JlZFJlc3VsdFxuICBqZFRleHQ6IHN0cmluZ1xuICBrZXl3b3JkU3RhdHM6IEtleXdvcmRTdGF0c1xufVxuXG5jb25zdCBzdG9yZSA9IG5ldyBNYXA8c3RyaW5nLCBTZXNzaW9uPigpXG5cbmZ1bmN0aW9uIHB1cmdlRXhwaXJlZCh0dGxNcyA9IDYwICogNjAgKiAxMDAwKSB7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KClcbiAgZm9yIChjb25zdCBbaWQsIHNdIG9mIHN0b3JlKSB7XG4gICAgaWYgKG5vdyAtIHMuY3JlYXRlZEF0ID4gdHRsTXMpIHN0b3JlLmRlbGV0ZShpZClcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2Vzc2lvbihvcmlnaW5hbDogUmVzdW1lSlNPTiwgdGFpbG9yZWQ6IFRhaWxvcmVkUmVzdWx0LCBqZFRleHQ6IHN0cmluZywga2V5d29yZFN0YXRzOiBLZXl3b3JkU3RhdHMpIHtcbiAgcHVyZ2VFeHBpcmVkKClcbiAgY29uc3QgaWQgPSB1dWlkKClcbiAgY29uc3QgdmVyc2lvbiA9IGdlbmVyYXRlU2Vzc2lvblZlcnNpb24ob3JpZ2luYWwsIHRhaWxvcmVkKVxuICBjb25zdCBzOiBTZXNzaW9uID0geyBpZCwgdmVyc2lvbiwgY3JlYXRlZEF0OiBEYXRlLm5vdygpLCBvcmlnaW5hbCwgdGFpbG9yZWQsIGpkVGV4dCwga2V5d29yZFN0YXRzIH1cbiAgc3RvcmUuc2V0KGlkLCBzKVxuICByZXR1cm4gc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Vzc2lvbihpZDogc3RyaW5nKSB7XG4gIHB1cmdlRXhwaXJlZCgpXG4gIGNvbnN0IHMgPSBzdG9yZS5nZXQoaWQpXG4gIGlmICghcykgcmV0dXJuIG51bGxcbiAgaWYgKERhdGUubm93KCkgLSBzLmNyZWF0ZWRBdCA+IDYwICogNjAgKiAxMDAwKSB7XG4gICAgc3RvcmUuZGVsZXRlKGlkKVxuICAgIHJldHVybiBudWxsXG4gIH1cbiAgcmV0dXJuIHNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVNlc3Npb24oaWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxTZXNzaW9uPikge1xuICBjb25zdCBzID0gc3RvcmUuZ2V0KGlkKVxuICBpZiAoIXMpIHJldHVybiBudWxsXG4gIFxuICBjb25zdCB1cGRhdGVkID0geyAuLi5zLCAuLi51cGRhdGVzIH1cbiAgaWYgKHVwZGF0ZXMub3JpZ2luYWwgfHwgdXBkYXRlcy50YWlsb3JlZCkge1xuICAgIHVwZGF0ZWQudmVyc2lvbiA9IGdlbmVyYXRlU2Vzc2lvblZlcnNpb24odXBkYXRlZC5vcmlnaW5hbCwgdXBkYXRlZC50YWlsb3JlZClcbiAgfVxuICBcbiAgc3RvcmUuc2V0KGlkLCB1cGRhdGVkKVxuICByZXR1cm4gdXBkYXRlZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlU2Vzc2lvbihpZDogc3RyaW5nKSB7XG4gIHJldHVybiBzdG9yZS5kZWxldGUoaWQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXNzaW9uVmVyc2lvbihpZDogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gIGNvbnN0IHMgPSBnZXRTZXNzaW9uKGlkKVxuICByZXR1cm4gcyA/IHMudmVyc2lvbiA6IG51bGxcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVTZXNzaW9uVmVyc2lvbihvcmlnaW5hbDogUmVzdW1lSlNPTiwgdGFpbG9yZWQ6IFRhaWxvcmVkUmVzdWx0KTogc3RyaW5nIHtcbiAgLy8gQ3JlYXRlIGEgaGFzaCBvZiB0aGUgY29udGVudCB0byBkZXRlY3QgY2hhbmdlc1xuICBjb25zdCBjb250ZW50ID0gSlNPTi5zdHJpbmdpZnkoeyBvcmlnaW5hbCwgdGFpbG9yZWQgfSlcbiAgcmV0dXJuIGJ0b2EoY29udGVudCkuc2xpY2UoMCwgMTYpIC8vIFNpbXBsZSBoYXNoLCBmaXJzdCAxNiBjaGFyc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTZXNzaW9uVmVyc2lvbihpZDogc3RyaW5nLCBwcm92aWRlZFZlcnNpb246IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBjdXJyZW50VmVyc2lvbiA9IGdldFNlc3Npb25WZXJzaW9uKGlkKVxuICByZXR1cm4gY3VycmVudFZlcnNpb24gPT09IHByb3ZpZGVkVmVyc2lvblxufVxuIl0sIm5hbWVzIjpbInY0IiwidXVpZCIsInN0b3JlIiwiTWFwIiwicHVyZ2VFeHBpcmVkIiwidHRsTXMiLCJub3ciLCJEYXRlIiwiaWQiLCJzIiwiY3JlYXRlZEF0IiwiZGVsZXRlIiwiY3JlYXRlU2Vzc2lvbiIsIm9yaWdpbmFsIiwidGFpbG9yZWQiLCJqZFRleHQiLCJrZXl3b3JkU3RhdHMiLCJ2ZXJzaW9uIiwiZ2VuZXJhdGVTZXNzaW9uVmVyc2lvbiIsInNldCIsImdldFNlc3Npb24iLCJnZXQiLCJ1cGRhdGVTZXNzaW9uIiwidXBkYXRlcyIsInVwZGF0ZWQiLCJkZWxldGVTZXNzaW9uIiwiZ2V0U2Vzc2lvblZlcnNpb24iLCJjb250ZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImJ0b2EiLCJzbGljZSIsInZhbGlkYXRlU2Vzc2lvblZlcnNpb24iLCJwcm92aWRlZFZlcnNpb24iLCJjdXJyZW50VmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/sessions.ts\n");

/***/ }),

/***/ "(rsc)/./lib/telemetry.ts":
/*!**************************!*\
  !*** ./lib/telemetry.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logAIResponse: () => (/* binding */ logAIResponse),\n/* harmony export */   logError: () => (/* binding */ logError),\n/* harmony export */   logPDFGeneration: () => (/* binding */ logPDFGeneration),\n/* harmony export */   logRequestTelemetry: () => (/* binding */ logRequestTelemetry),\n/* harmony export */   logSessionActivity: () => (/* binding */ logSessionActivity),\n/* harmony export */   startTrace: () => (/* binding */ startTrace)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n\n\nconst TELEMETRY_PATH = \"/tmp/telemetry.jsonl\";\nconst AI_RESPONSES_PATH = \"/tmp/ai-responses.jsonl\";\nconst ERROR_LOG_PATH = \"/tmp/error-log.jsonl\";\nconst LOG_DRAIN_URL = process.env.LOG_DRAIN_URL || \"\";\nconst LOG_DRAIN_KEY = process.env.LOG_DRAIN_KEY || \"\";\nfunction startTrace(meta = {}) {\n    const id = (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    const t0 = Date.now();\n    function end(ok, extra = {}) {\n        const rec = {\n            req_id: id,\n            route: meta.route || \"unknown\",\n            timing: Date.now() - t0,\n            timestamp: new Date().toISOString(),\n            final_status: ok ? \"success\" : \"error\",\n            ...meta,\n            ...extra\n        };\n        try {\n            fs__WEBPACK_IMPORTED_MODULE_0___default().appendFileSync(TELEMETRY_PATH, JSON.stringify(rec) + \"\\n\");\n        } catch (e) {\n            console.warn(\"Failed to write telemetry:\", e);\n        }\n        void sendToDrain(rec);\n        return rec;\n    }\n    return {\n        id,\n        end\n    };\n}\nfunction logAIResponse(attempt, success, error, responseLength, model) {\n    const logEntry = {\n        timestamp: new Date().toISOString(),\n        type: \"ai_response\",\n        attempt,\n        success,\n        error: error?.substring(0, 500),\n        responseLength,\n        model: model || process.env.OPENAI_MODEL || \"gpt-4o-mini\"\n    };\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().appendFileSync(AI_RESPONSES_PATH, JSON.stringify(logEntry) + \"\\n\");\n    } catch (e) {\n        console.warn(\"Failed to log AI response:\", e);\n    }\n    void sendToDrain(logEntry);\n}\nfunction logError(error, context = {}) {\n    const logEntry = {\n        timestamp: new Date().toISOString(),\n        type: \"error\",\n        message: error.message,\n        stack: error.stack,\n        context: JSON.stringify(context)\n    };\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().appendFileSync(ERROR_LOG_PATH, JSON.stringify(logEntry) + \"\\n\");\n    } catch (e) {\n        console.warn(\"Failed to log error:\", e);\n    }\n    void sendToDrain(logEntry);\n}\nfunction logPDFGeneration(attempt, success, error, method, size) {\n    const logEntry = {\n        timestamp: new Date().toISOString(),\n        type: \"pdf_generation\",\n        attempt,\n        success,\n        error: error?.substring(0, 500),\n        method,\n        size\n    };\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().appendFileSync(TELEMETRY_PATH, JSON.stringify(logEntry) + \"\\n\");\n    } catch (e) {\n        console.warn(\"Failed to log PDF generation:\", e);\n    }\n    void sendToDrain(logEntry);\n}\nfunction logSessionActivity(sessionId, activity, details = {}) {\n    const logEntry = {\n        timestamp: new Date().toISOString(),\n        type: \"session_activity\",\n        sessionId,\n        activity,\n        details: JSON.stringify(details)\n    };\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().appendFileSync(TELEMETRY_PATH, JSON.stringify(logEntry) + \"\\n\");\n    } catch (e) {\n        console.warn(\"Failed to log session activity:\", e);\n    }\n    void sendToDrain(logEntry);\n}\nfunction logRequestTelemetry(data) {\n    const logEntry = {\n        timestamp: new Date().toISOString(),\n        type: \"request_telemetry\",\n        ...data\n    };\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().appendFileSync(TELEMETRY_PATH, JSON.stringify(logEntry) + \"\\n\");\n    } catch (e) {\n        console.warn(\"Failed to log request telemetry:\", e);\n    }\n    void sendToDrain(logEntry);\n}\nasync function sendToDrain(entry) {\n    if (!LOG_DRAIN_URL) return;\n    try {\n        await fetch(LOG_DRAIN_URL, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...LOG_DRAIN_KEY ? {\n                    \"Authorization\": `Bearer ${LOG_DRAIN_KEY}`\n                } : {}\n            },\n            body: JSON.stringify(entry)\n        });\n    } catch  {}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/telemetry.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/formdata-node","vendor-chunks/node-fetch","vendor-chunks/openai","vendor-chunks/next","vendor-chunks/zod","vendor-chunks/@opentelemetry","vendor-chunks/web-streams-polyfill","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/form-data-encoder","vendor-chunks/abort-controller","vendor-chunks/ms","vendor-chunks/uuid","vendor-chunks/humanize-ms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprocess-line-selections%2Froute&page=%2Fapi%2Fprocess-line-selections%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-line-selections%2Froute.ts&appDir=%2FUsers%2Fyassinkhalil%2FDownloads%2Fai-resume-tailor_v2_full%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyassinkhalil%2FDownloads%2Fai-resume-tailor_v2_full&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();